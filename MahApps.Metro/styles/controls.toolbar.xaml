<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary
			Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.TextBox.xaml" />
		<ResourceDictionary
			Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.ComboBox.xaml" />
	</ResourceDictionary.MergedDictionaries>
	<Style
		TargetType="{x:Type ButtonBase}"
		x:Key="ToolBarButtonBaseStyle">
		<Style.Resources>
			<ResourceDictionary>
				<Style
					TargetType="{x:Type Image}"
					x:Key="{x:Type Image}">
					<Style.Triggers>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Property="UIElement.Opacity"
								Value="0.5" />
						</Trigger>
					</Style.Triggers>
				</Style>
			</ResourceDictionary>
		</Style.Resources>
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ButtonBase}">
					<Border
						Name="Border"
						Background="{DynamicResource TransparentWhiteBrush}"
						BorderBrush="{DynamicResource TransparentWhiteBrush}"
						BorderThickness="1">
						<ContentPresenter
							Margin="2"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							RecognizesAccessKey="True" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsKeyboardFocused"
							Value="True">
							<Setter
								TargetName="Border"
								Value="{DynamicResource GrayBrush7}"
								Property="Background" />
							<Setter
								TargetName="Border"
								Value="{DynamicResource GrayBrush7}"
								Property="BorderBrush" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="Border"
								Value="{DynamicResource GrayBrush7}"
								Property="Background" />
							<Setter
								TargetName="Border"
								Value="{DynamicResource GrayBrush7}"
								Property="BorderBrush" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								TargetName="Border"
								Value="{DynamicResource AccentColorBrush}"
								Property="Background" />
							<Setter
								TargetName="Border"
								Value="{DynamicResource AccentColorBrush}"
								Property="BorderBrush" />
						</Trigger>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="true">
							<Setter
								TargetName="Border"
								Value="{DynamicResource AccentColorBrush}"
								Property="Background" />
							<Setter
								TargetName="Border"
								Value="{DynamicResource AccentColorBrush}"
								Property="BorderBrush" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource GrayBrush3}"
								Property="Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		BasedOn="{StaticResource ToolBarButtonBaseStyle}"
		TargetType="{x:Type Button}"
		x:Key="{x:Static ToolBar.ButtonStyleKey}" />
	<Style
		BasedOn="{StaticResource ToolBarButtonBaseStyle}"
		TargetType="{x:Type ToggleButton}"
		x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" />
	<Style
		BasedOn="{StaticResource ToolBarButtonBaseStyle}"
		TargetType="{x:Type CheckBox}"
		x:Key="{x:Static ToolBar.CheckBoxStyleKey}" />
	<Style
		BasedOn="{StaticResource ToolBarButtonBaseStyle}"
		TargetType="{x:Type RadioButton}"
		x:Key="{x:Static ToolBar.RadioButtonStyleKey}" />
	<Style
		BasedOn="{StaticResource MetroTextBox}"
		TargetType="{x:Type TextBox}"
		x:Key="{x:Static ToolBar.TextBoxStyleKey}" />
	<Style
		BasedOn="{StaticResource MetroComboBox}"
		TargetType="{x:Type ComboBox}"
		x:Key="{x:Static ToolBar.ComboBoxStyleKey}" />
	<Style
		TargetType="{x:Type Thumb}"
		x:Key="ToolBarThumbStyle">
		<Setter
			Property="FrameworkElement.Cursor"
			Value="SizeAll" />
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Thumb}">
					<Border
						Margin="0 3 0 3"
						Background="#00FFFFFF"
						SnapsToDevicePixels="True">
						<Rectangle
							Width="4.9">
							<Shape.Fill>
								<DrawingBrush
									TileMode="Tile"
									Viewbox="0,0,5,4"
									ViewboxUnits="Absolute"
									Viewport="0,0,5,4"
									ViewportUnits="Absolute">
									<DrawingBrush.Drawing>
										<GeometryDrawing
											Brush="{DynamicResource GrayBrush3}">
											<GeometryDrawing.Geometry>
												<GeometryGroup>
													<GeometryGroup.Children>
														<RectangleGeometry
															Rect="0,0,1,1" />
														<RectangleGeometry
															Rect="4,0,1,1" />
														<RectangleGeometry
															Rect="2,2,1,1" />
													</GeometryGroup.Children>
												</GeometryGroup>
											</GeometryDrawing.Geometry>
										</GeometryDrawing>
									</DrawingBrush.Drawing>
								</DrawingBrush>
							</Shape.Fill>
						</Rectangle>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ToggleButton}"
		x:Key="ToolBarOverflowButtonStyle">
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Border
						Name="Bd"
						Background="#00FFFFFF"
						CornerRadius="0,3,3,0"
						SnapsToDevicePixels="True">
						<Grid>
							<Rectangle
								Name="Rectangle"
								Width="6"
								Height="1"
								Margin="2 8"
								VerticalAlignment="Bottom"
								Fill="{DynamicResource BlackBrush}" />
							<Path
								Name="Arrow"
								Margin="2 3"
								VerticalAlignment="Bottom"
								Data="M0,0 L6,0 L3,3"
								Fill="{DynamicResource BlackBrush}" />
							<ContentPresenter />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="Arrow"
								Value="{DynamicResource AccentColorBrush}"
								Property="Fill" />
							<Setter
								TargetName="Bd"
								Value="{DynamicResource GrayBrush7}"
								Property="Background" />
							<Setter
								TargetName="Rectangle"
								Value="{DynamicResource AccentColorBrush}"
								Property="Fill" />
						</Trigger>
						<Trigger
							Property="UIElement.IsKeyboardFocused"
							Value="True">
							<Setter
								TargetName="Arrow"
								Value="{DynamicResource AccentColorBrush}"
								Property="Fill" />
							<Setter
								TargetName="Bd"
								Value="{DynamicResource GrayBrush7}"
								Property="Background" />
							<Setter
								TargetName="Rectangle"
								Value="{DynamicResource AccentColorBrush}"
								Property="Fill" />
						</Trigger>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="true">
							<Setter
								TargetName="Arrow"
								Value="{DynamicResource BlackBrush}"
								Property="Fill" />
							<Setter
								TargetName="Bd"
								Value="{DynamicResource AccentColorBrush}"
								Property="Background" />
							<Setter
								TargetName="Rectangle"
								Value="{DynamicResource BlackBrush}"
								Property="Fill" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="Arrow"
								Value="{DynamicResource TransparentWhiteBrush}"
								Property="Fill" />
							<Setter
								TargetName="Rectangle"
								Value="{DynamicResource TransparentWhiteBrush}"
								Property="Fill" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ToolBar}"
		x:Key="{x:Type ToolBar}">
		<Setter
			Property="FrameworkElement.OverridesDefaultStyle"
			Value="True" />
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToolBar}">
					<Border
						Name="Border"
						Background="{DynamicResource TransparentWhiteBrush}"
						BorderBrush="{DynamicResource TransparentWhiteBrush}"
						BorderThickness="1"
						CornerRadius="2">
						<DockPanel>
							<ToggleButton
								ClickMode="Press"
								DockPanel.Dock="Right"
								IsEnabled="{TemplateBinding HasOverflowItems}"
								Style="{StaticResource ToolBarOverflowButtonStyle}"
								IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
								<Popup
									Name="OverflowPopup"
									AllowsTransparency="True"
									Focusable="False"
									Placement="Bottom"
									PopupAnimation="Slide"
									StaysOpen="False"
									IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}">
									<Border
										Name="DropDownBorder"
										Background="{DynamicResource ControlBackgroundBrush}"
										BorderBrush="{DynamicResource ControlBorderBrush}"
										BorderThickness="1">
										<ToolBarOverflowPanel
											Name="PART_ToolBarOverflowPanel"
											Margin="2"
											Focusable="True"
											KeyboardNavigation.DirectionalNavigation="Cycle"
											KeyboardNavigation.TabNavigation="Cycle"
											WrapWidth="200"
											FocusVisualStyle="{x:Null}" />
									</Border>
								</Popup>
							</ToggleButton>
							<Thumb
								Name="ToolBarThumb"
								Width="10"
								Style="{StaticResource ToolBarThumbStyle}" />
							<ToolBarPanel
								Name="PART_ToolBarPanel"
								Margin="0 1 2 2"
								IsItemsHost="True" />
						</DockPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToolBar.IsOverflowOpen"
							Value="True">
							<Setter
								TargetName="ToolBarThumb"
								Property="IsEnabled"
								Value="False" />
						</Trigger>
						<Trigger
							Property="ToolBarTray.IsLocked"
							Value="True">
							<Setter
								TargetName="ToolBarThumb"
								Property="Visibility"
								Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ToolBarTray}"
		x:Key="{x:Type ToolBarTray}">
		<Setter
			Property="ToolBarTray.Background"
			Value="{DynamicResource WindowBackgroundBrush}" />
	</Style>
</ResourceDictionary>
