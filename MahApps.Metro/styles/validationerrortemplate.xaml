<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Controls="clr-namespace:MahApps.Metro.Controls">
	<Style
		TargetType="{x:Type Controls:CustomValidationPopup}"
		x:Key="MetroValidationPopup">
		<Setter
			Property="HorizontalAlignment"
			Value="Right" />
		<Setter
			Property="Popup.HorizontalOffset"
			Value="0" />
		<Setter
			Property="Placement"
			Value="Right" />
		<Setter
			Property="PopupAnimation"
			Value="Fade" />
		<Setter
			Property="Popup.VerticalOffset"
			Value="0" />
	</Style>
	<ControlTemplate
		x:Key="ValidationErrorTemplate">
		<AdornedElementPlaceholder
			Name="placeholder">
			<Grid
				SnapsToDevicePixels="True">
				<Rectangle
					Name="PopupTargetElement"
					Margin="-5 0 -5 0"
					StrokeThickness="0"
					DataContext="{Binding ElementName=placeholder}" />
				<Border
					Name="ValidationErrorElement"
					BorderBrush="{DynamicResource ControlsValidationBrush}"
					BorderThickness="1"
					DataContext="{Binding ElementName=placeholder}">
					<Grid
						Width="12"
						Height="12"
						Margin="1 -4 -4 0"
						HorizontalAlignment="Right"
						VerticalAlignment="Top"
						Background="#00FFFFFF">
						<Path
							Margin="1 3 0 0"
							Data="M1,0 L6,0 A2,2 0 0 1 8,2L8,7"
							Fill="{DynamicResource ValidationBrush5}" />
						<Path
							Margin="1 3 0 0"
							Data="M0,0 L2,0 L8,6 L8,8"
							Fill="{DynamicResource WhiteColorBrush}" />
					</Grid>
				</Border>
				<Controls:CustomValidationPopup
					Name="ValidationPopup"
					AllowsTransparency="True"
					IsOpen="False"
					PlacementTarget="{Binding ElementName=PopupTargetElement, Mode=OneWay}">
					<Grid
						Name="Root"
						Margin="4">
						<FrameworkElement.Resources>
							<ResourceDictionary>
								<Style
									TargetType="{x:Type Border}"
									x:Key="{x:Type Border}">
									<Style.Triggers>
										<DataTrigger
											Value="True"
											Binding="{Binding ElementName=Root, Path=IsMouseOver, Mode=OneWay}">
											<TriggerBase.EnterActions>
												<BeginStoryboard>
													<Storyboard>
														<DoubleAnimation
															Storyboard.TargetProperty="Opacity"
															To="0.15"
															Duration="0:0:0.1" />
													</Storyboard>
												</BeginStoryboard>
											</TriggerBase.EnterActions>
											<TriggerBase.ExitActions>
												<BeginStoryboard>
													<Storyboard>
														<DoubleAnimation
															Storyboard.TargetProperty="Opacity"
															To="1"
															Duration="0:0:0.1" />
													</Storyboard>
												</BeginStoryboard>
											</TriggerBase.ExitActions>
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</ResourceDictionary>
						</FrameworkElement.Resources>
						<Border
							Margin="4 4 -4 -4"
							Background="{DynamicResource ValidationBrush1}"
							CornerRadius="5" />
						<Border
							Margin="3 3 -3 -3"
							Background="{DynamicResource ValidationBrush2}"
							CornerRadius="4" />
						<Border
							Margin="2 2 -2 -2"
							Background="{DynamicResource ValidationBrush3}"
							CornerRadius="3" />
						<Border
							Margin="1 1 -1 -1"
							Background="{DynamicResource ValidationBrush4}"
							CornerRadius="2" />
						<Border
							Background="{DynamicResource ValidationBrush5}"
							CornerRadius="2">
							<FrameworkElement.Resources>
								<ResourceDictionary>
									<DataTemplate
										DataType="{x:Type ValidationError}"
										x:Key="{DataTemplateKey {x:Type ValidationError}}">
										<TextBlock
											MaxWidth="250"
											Margin="8 4 8 4"
											Foreground="{DynamicResource ValidationTextBrush}"
											TextWrapping="Wrap"
											UseLayoutRounding="False"
											Text="{Binding ErrorContent}" />
									</DataTemplate>
								</ResourceDictionary>
							</FrameworkElement.Resources>
							<ItemsControl
								ItemsSource="{Binding}" />
						</Border>
					</Grid>
				</Controls:CustomValidationPopup>
			</Grid>
		</AdornedElementPlaceholder>
		<ControlTemplate.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition
						Value="True"
						Binding="{Binding ElementName=placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay}" />
					<Condition
						Value="True"
						Binding="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.HasError), Mode=OneWay}" />
				</MultiDataTrigger.Conditions>
				<Setter
					TargetName="ValidationPopup"
					Property="IsOpen"
					Value="True" />
			</MultiDataTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
</ResourceDictionary>
