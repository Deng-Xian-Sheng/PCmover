<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Controls="clr-namespace:MahApps.Metro.Controls" xmlns:Converters="clr-namespace:MahApps.Metro.Converters" xmlns:sys="clr-namespace:System;assembly=mscorlib">
	<Converters:ThicknessBindingConverter
		x:Key="ThicknessBindingConverter" />
	<Thickness
		x:Key="ExpanderHeaderThemePadding">2</Thickness>
	<sys:Double
		x:Key="ExpanderToggleButtonEllipseThemeSize">18</sys:Double>
	<Style
		TargetType="{x:Type ToggleButton}"
		x:Key="ExpanderBaseHeaderStyle">
		<Setter
			Property="Background"
			Value="#00FFFFFF" />
		<Setter
			Property="BorderBrush"
			Value="#00FFFFFF" />
		<Setter
			Property="BorderThickness"
			Value="0" />
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{x:Null}" />
		<Setter
			Property="Margin"
			Value="0" />
		<Setter
			Property="Padding"
			Value="{DynamicResource ExpanderHeaderThemePadding}" />
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
	</Style>
	<Style
		BasedOn="{StaticResource ExpanderBaseHeaderStyle}"
		TargetType="{x:Type ToggleButton}"
		x:Key="ExpanderRightHeaderStyle">
		<Setter
			Property="HorizontalContentAlignment"
			Value="Center" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<Grid
							Margin="{TemplateBinding Padding}"
							Background="#00FFFFFF"
							SnapsToDevicePixels="False">
							<Grid.RowDefinitions>
								<RowDefinition
									Height="Auto" />
								<RowDefinition
									Height="*" />
							</Grid.RowDefinitions>
							<Grid
								Margin="1">
								<FrameworkElement.LayoutTransform>
									<TransformGroup>
										<TransformGroup.Children>
											<TransformCollection>
												<RotateTransform
													Angle="-90" />
											</TransformCollection>
										</TransformGroup.Children>
									</TransformGroup>
								</FrameworkElement.LayoutTransform>
								<Ellipse
									Name="Circle"
									Width="{DynamicResource ExpanderToggleButtonEllipseThemeSize}"
									Height="{DynamicResource ExpanderToggleButtonEllipseThemeSize}"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Stroke="{TemplateBinding Foreground}" />
								<Path
									Name="Arrow"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Data="M1,1.5 L4.5,5 L8,1.5"
									SnapsToDevicePixels="False"
									Stroke="{TemplateBinding Foreground}"
									StrokeThickness="2" />
							</Grid>
							<Controls:ContentControlEx
								Grid.Row="1"
								Margin="0 4 0 0"
								HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								Content="{TemplateBinding Content}"
								ContentStringFormat="{TemplateBinding ContentStringFormat}"
								ContentTemplate="{TemplateBinding ContentTemplate}"
								ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
								RecognizesAccessKey="True"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="true">
							<Setter
								TargetName="Arrow"
								Property="Data"
								Value="M1,4.5 L4.5,1 L8,4.5" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="Arrow"
								Value="{DynamicResource GrayBrush2}"
								Property="Stroke" />
							<Setter
								TargetName="Circle"
								Value="{DynamicResource GrayBrush2}"
								Property="Stroke" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								TargetName="Arrow"
								Value="{DynamicResource BlackColorBrush}"
								Property="Stroke" />
							<Setter
								TargetName="Circle"
								Value="{DynamicResource BlackColorBrush}"
								Property="Stroke" />
							<Setter
								TargetName="Circle"
								Property="StrokeThickness"
								Value="2" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="VerticalContentAlignment"
			Value="Stretch" />
	</Style>
	<Style
		BasedOn="{StaticResource ExpanderBaseHeaderStyle}"
		TargetType="{x:Type ToggleButton}"
		x:Key="ExpanderUpHeaderStyle">
		<Setter
			Property="HorizontalContentAlignment"
			Value="Stretch" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
						<Grid
							Margin="{TemplateBinding Padding}"
							Background="#00FFFFFF"
							SnapsToDevicePixels="False">
							<Grid.ColumnDefinitions>
								<ColumnDefinition
									Width="Auto" />
								<ColumnDefinition
									Width="*" />
							</Grid.ColumnDefinitions>
							<Grid
								Margin="1">
								<FrameworkElement.LayoutTransform>
									<TransformGroup>
										<TransformGroup.Children>
											<TransformCollection>
												<RotateTransform
													Angle="180" />
											</TransformCollection>
										</TransformGroup.Children>
									</TransformGroup>
								</FrameworkElement.LayoutTransform>
								<Ellipse
									Name="Circle"
									Width="{DynamicResource ExpanderToggleButtonEllipseThemeSize}"
									Height="{DynamicResource ExpanderToggleButtonEllipseThemeSize}"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Stroke="{TemplateBinding Foreground}" />
								<Path
									Name="Arrow"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Data="M1,1.5 L4.5,5 L8,1.5"
									SnapsToDevicePixels="False"
									Stroke="{TemplateBinding Foreground}"
									StrokeThickness="2" />
							</Grid>
							<Controls:ContentControlEx
								Grid.Column="1"
								Margin="4 0 0 0"
								HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								Content="{TemplateBinding Content}"
								ContentStringFormat="{TemplateBinding ContentStringFormat}"
								ContentTemplate="{TemplateBinding ContentTemplate}"
								ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
								RecognizesAccessKey="True"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="true">
							<Setter
								TargetName="Arrow"
								Property="Data"
								Value="M1,4.5 L4.5,1 L8,4.5" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="Arrow"
								Value="{DynamicResource GrayBrush2}"
								Property="Stroke" />
							<Setter
								TargetName="Circle"
								Value="{DynamicResource GrayBrush2}"
								Property="Stroke" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								TargetName="Arrow"
								Value="{DynamicResource BlackColorBrush}"
								Property="Stroke" />
							<Setter
								TargetName="Circle"
								Value="{DynamicResource BlackColorBrush}"
								Property="Stroke" />
							<Setter
								TargetName="Circle"
								Property="StrokeThickness"
								Value="2" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="VerticalContentAlignment"
			Value="Center" />
	</Style>
	<Style
		BasedOn="{StaticResource ExpanderRightHeaderStyle}"
		TargetType="{x:Type ToggleButton}"
		x:Key="ExpanderLeftHeaderStyle">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
						<Grid
							Margin="{TemplateBinding Padding}"
							Background="#00FFFFFF"
							SnapsToDevicePixels="False">
							<Grid.RowDefinitions>
								<RowDefinition
									Height="Auto" />
								<RowDefinition
									Height="*" />
							</Grid.RowDefinitions>
							<Grid
								Margin="1">
								<FrameworkElement.LayoutTransform>
									<TransformGroup>
										<TransformGroup.Children>
											<TransformCollection>
												<RotateTransform
													Angle="90" />
											</TransformCollection>
										</TransformGroup.Children>
									</TransformGroup>
								</FrameworkElement.LayoutTransform>
								<Ellipse
									Name="Circle"
									Width="{DynamicResource ExpanderToggleButtonEllipseThemeSize}"
									Height="{DynamicResource ExpanderToggleButtonEllipseThemeSize}"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Stroke="{TemplateBinding Foreground}" />
								<Path
									Name="Arrow"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Data="M1,1.5 L4.5,5 L8,1.5"
									SnapsToDevicePixels="False"
									Stroke="{TemplateBinding Foreground}"
									StrokeThickness="2" />
							</Grid>
							<Controls:ContentControlEx
								Grid.Row="1"
								Margin="0 4 0 0"
								HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								Content="{TemplateBinding Content}"
								ContentStringFormat="{TemplateBinding ContentStringFormat}"
								ContentTemplate="{TemplateBinding ContentTemplate}"
								ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
								RecognizesAccessKey="True"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="true">
							<Setter
								TargetName="Arrow"
								Property="Data"
								Value="M1,4.5 L4.5,1 L8,4.5" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="Arrow"
								Value="{DynamicResource GrayBrush2}"
								Property="Stroke" />
							<Setter
								TargetName="Circle"
								Value="{DynamicResource GrayBrush2}"
								Property="Stroke" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								TargetName="Arrow"
								Value="{DynamicResource BlackColorBrush}"
								Property="Stroke" />
							<Setter
								TargetName="Circle"
								Value="{DynamicResource BlackColorBrush}"
								Property="Stroke" />
							<Setter
								TargetName="Circle"
								Property="StrokeThickness"
								Value="2" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		BasedOn="{StaticResource ExpanderUpHeaderStyle}"
		TargetType="{x:Type ToggleButton}"
		x:Key="ExpanderDownHeaderStyle">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
						<Grid
							Margin="{TemplateBinding Padding}"
							Background="#00FFFFFF"
							SnapsToDevicePixels="False">
							<Grid.ColumnDefinitions>
								<ColumnDefinition
									Width="Auto" />
								<ColumnDefinition
									Width="*" />
							</Grid.ColumnDefinitions>
							<Grid
								Margin="1">
								<Ellipse
									Name="Circle"
									Width="{DynamicResource ExpanderToggleButtonEllipseThemeSize}"
									Height="{DynamicResource ExpanderToggleButtonEllipseThemeSize}"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Stroke="{TemplateBinding Foreground}" />
								<Path
									Name="Arrow"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Data="M1,1.5 L4.5,5 L8,1.5"
									SnapsToDevicePixels="False"
									Stroke="{TemplateBinding Foreground}"
									StrokeThickness="2" />
							</Grid>
							<Controls:ContentControlEx
								Grid.Column="1"
								Margin="4 0 0 0"
								HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								Content="{TemplateBinding Content}"
								ContentStringFormat="{TemplateBinding ContentStringFormat}"
								ContentTemplate="{TemplateBinding ContentTemplate}"
								ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
								RecognizesAccessKey="True"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="true">
							<Setter
								TargetName="Arrow"
								Property="Data"
								Value="M1,4.5 L4.5,1 L8,4.5" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="Arrow"
								Value="{DynamicResource GrayBrush2}"
								Property="Stroke" />
							<Setter
								TargetName="Circle"
								Value="{DynamicResource GrayBrush2}"
								Property="Stroke" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								TargetName="Arrow"
								Value="{DynamicResource BlackColorBrush}"
								Property="Stroke" />
							<Setter
								TargetName="Circle"
								Value="{DynamicResource BlackColorBrush}"
								Property="Stroke" />
							<Setter
								TargetName="Circle"
								Property="StrokeThickness"
								Value="2" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Storyboard
		x:Key="MetroExpanderExpandStoryboard">
		<DoubleAnimation
			Storyboard.TargetName="ExpandSite"
			Storyboard.TargetProperty="(UIElement.Opacity)"
			To="1"
			Duration="0:0:0.25" />
		<ObjectAnimationUsingKeyFrames
			Storyboard.TargetName="ExpandSite"
			Storyboard.TargetProperty="(UIElement.Visibility)">
			<DiscreteObjectKeyFrame
				KeyTime="0"
				Value="{x:Static Visibility.Visible}" />
		</ObjectAnimationUsingKeyFrames>
	</Storyboard>
	<Storyboard
		x:Key="MetroExpanderCollapseStoryboard">
		<DoubleAnimation
			Storyboard.TargetName="ExpandSite"
			Storyboard.TargetProperty="(UIElement.Opacity)"
			To="0"
			Duration="0:0:0.25" />
		<ObjectAnimationUsingKeyFrames
			Storyboard.TargetName="ExpandSite"
			Storyboard.TargetProperty="(UIElement.Visibility)">
			<DiscreteObjectKeyFrame
				KeyTime="0:0:0.25"
				Value="{x:Static Visibility.Collapsed}" />
		</ObjectAnimationUsingKeyFrames>
	</Storyboard>
	<Style
		TargetType="{x:Type Expander}"
		x:Key="MetroExpander">
		<Setter
			Property="Background"
			Value="{DynamicResource AccentColorBrush}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource AccentColorBrush}" />
		<Setter
			Property="BorderThickness"
			Value="1" />
		<Setter
			Property="Controls:ControlsHelper.ContentCharacterCasing"
			Value="Upper" />
		<Setter
			Property="Controls:ControlsHelper.HeaderFontSize"
			Value="{DynamicResource ContentFontSize}" />
		<Setter
			Property="Controls:ExpanderHelper.HeaderDownStyle"
			Value="{StaticResource ExpanderDownHeaderStyle}" />
		<Setter
			Property="Controls:ExpanderHelper.HeaderLeftStyle"
			Value="{StaticResource ExpanderLeftHeaderStyle}" />
		<Setter
			Property="Controls:ExpanderHelper.HeaderRightStyle"
			Value="{StaticResource ExpanderRightHeaderStyle}" />
		<Setter
			Property="Controls:ExpanderHelper.HeaderUpStyle"
			Value="{StaticResource ExpanderUpHeaderStyle}" />
		<Setter
			Property="Controls:GroupBoxHelper.HeaderForeground"
			Value="{x:Null}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource BlackBrush}" />
		<Setter
			Property="Padding"
			Value="4" />
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Expander}">
					<Grid>
						<Rectangle
							Name="DisabledVisualElement"
							Fill="{DynamicResource ControlsDisabledBrush}"
							IsHitTestVisible="False"
							Opacity="0" />
						<DockPanel
							Name="ExpanderRoot">
							<Border
								Name="HeaderSite"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								DockPanel.Dock="Top"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								UseLayoutRounding="True">
								<ToggleButton
									Name="ToggleSite"
									Content="{TemplateBinding Header}"
									ContentStringFormat="{TemplateBinding HeaderStringFormat}"
									ContentTemplate="{TemplateBinding HeaderTemplate}"
									ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
									FontSize="{TemplateBinding Controls:HeaderFontSize}"
									FontStretch="{TemplateBinding Controls:HeaderFontStretch}"
									FontWeight="{TemplateBinding Controls:HeaderFontWeight}"
									UseLayoutRounding="False"
									Controls:ControlsHelper.ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}"
									IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
									Style="{Binding Path=(Controls:ExpanderHelper.HeaderDownStyle), RelativeSource={RelativeSource TemplatedParent}}">
									<Control.Foreground>
										<MultiBinding
											Converter="{x:Static Converters:BackgroundToForegroundConverter.Instance}">
											<Binding
												Mode="OneWay"
												Path="Background"
												RelativeSource="{RelativeSource TemplatedParent}" />
											<Binding
												Mode="OneWay"
												Path="(Controls:GroupBoxHelper.HeaderForeground)"
												RelativeSource="{RelativeSource TemplatedParent}" />
										</MultiBinding>
									</Control.Foreground>
								</ToggleButton>
							</Border>
							<Border
								Name="ExpandSite"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								Background="#00FFFFFF"
								BorderBrush="{TemplateBinding BorderBrush}"
								DockPanel.Dock="Bottom"
								Focusable="False"
								Opacity="0"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								UseLayoutRounding="True"
								Visibility="Collapsed"
								BorderThickness="{Binding Path=BorderThickness, ConverterParameter={x:Static Converters:ThicknessSideType.Top}, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessBindingConverter}}">
								<ContentPresenter
									Margin="{TemplateBinding Padding}"
									Content="{TemplateBinding Content}"
									ContentTemplate="{TemplateBinding ContentTemplate}"
									Cursor="{TemplateBinding Cursor}"
									UseLayoutRounding="False" />
							</Border>
						</DockPanel>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup
								x:Name="CommonStates">
								<VisualState
									x:Name="Normal" />
								<VisualState
									x:Name="MouseOver" />
								<VisualState
									x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames
											Storyboard.TargetName="DisabledVisualElement"
											Storyboard.TargetProperty="Opacity">
											<SplineDoubleKeyFrame
												KeyTime="0"
												Value="0.7" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames
											Storyboard.TargetName="ExpanderRoot"
											Storyboard.TargetProperty="(UIElement.Opacity)">
											<EasingDoubleKeyFrame
												KeyTime="0"
												Value="0.3" />
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="Expander.IsExpanded"
							Value="True">
							<Setter
								TargetName="ExpandSite"
								Property="Visibility"
								Value="Visible" />
							<TriggerBase.EnterActions>
								<BeginStoryboard
									Storyboard="{StaticResource MetroExpanderExpandStoryboard}" />
							</TriggerBase.EnterActions>
							<TriggerBase.ExitActions>
								<BeginStoryboard
									Storyboard="{StaticResource MetroExpanderCollapseStoryboard}" />
							</TriggerBase.ExitActions>
						</Trigger>
						<Trigger
							Property="Expander.ExpandDirection"
							Value="Right">
							<Setter
								TargetName="ExpandSite"
								Property="BorderThickness"
								Value="{Binding Path=BorderThickness, ConverterParameter={x:Static Converters:ThicknessSideType.Left}, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessBindingConverter}}" />
							<Setter
								TargetName="ExpandSite"
								Property="Dock"
								Value="Right" />
							<Setter
								TargetName="HeaderSite"
								Property="Dock"
								Value="Left" />
							<Setter
								TargetName="ToggleSite"
								Property="Style"
								Value="{Binding Path=(Controls:ExpanderHelper.HeaderRightStyle), RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<Trigger
							Property="Expander.ExpandDirection"
							Value="Up">
							<Setter
								TargetName="ExpandSite"
								Property="BorderThickness"
								Value="{Binding Path=BorderThickness, ConverterParameter={x:Static Converters:ThicknessSideType.Bottom}, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessBindingConverter}}" />
							<Setter
								TargetName="ExpandSite"
								Property="Dock"
								Value="Top" />
							<Setter
								TargetName="HeaderSite"
								Property="Dock"
								Value="Bottom" />
							<Setter
								TargetName="ToggleSite"
								Property="Style"
								Value="{Binding Path=(Controls:ExpanderHelper.HeaderUpStyle), RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<Trigger
							Property="Expander.ExpandDirection"
							Value="Left">
							<Setter
								TargetName="ExpandSite"
								Property="BorderThickness"
								Value="{Binding Path=BorderThickness, ConverterParameter={x:Static Converters:ThicknessSideType.Right}, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessBindingConverter}}" />
							<Setter
								TargetName="ExpandSite"
								Property="Dock"
								Value="Left" />
							<Setter
								TargetName="HeaderSite"
								Property="Dock"
								Value="Right" />
							<Setter
								TargetName="ToggleSite"
								Property="Style"
								Value="{Binding Path=(Controls:ExpanderHelper.HeaderLeftStyle), RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Value="{DynamicResource SystemColors.GrayTextBrushKey}"
								Property="Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>
