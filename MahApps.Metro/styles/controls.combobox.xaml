<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Controls="clr-namespace:MahApps.Metro.Controls" xmlns:Converters="clr-namespace:MahApps.Metro.Converters">
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary
			Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.TextBox.xaml" />
	</ResourceDictionary.MergedDictionaries>
	<Thickness
		x:Key="ComboBoxBorderThemeThickness">1</Thickness>
	<Thickness
		x:Key="ComboBoxPopupBorderThemeThickness">1</Thickness>
	<Thickness
		x:Key="ComboBoxPopupBorderThemePadding">1</Thickness>
	<Style
		BasedOn="{StaticResource MetroTextBox}"
		TargetType="{x:Type TextBox}"
		x:Key="EditableTextBoxStyle">
		<Setter
			Property="MinHeight"
			Value="0" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type TextBox}">
					<FrameworkTemplate.Resources>
						<ResourceDictionary>
							<Storyboard
								x:Key="enterGotFocus">
								<DoubleAnimation
									Storyboard.TargetName="PART_Message"
									Storyboard.TargetProperty="Opacity"
									To=".2"
									Duration="0:0:0.2" />
							</Storyboard>
							<Storyboard
								x:Key="exitGotFocus">
								<DoubleAnimation
									Storyboard.TargetName="PART_Message"
									Storyboard.TargetProperty="Opacity"
									Duration="0:0:0.2" />
							</Storyboard>
							<Storyboard
								x:Key="enterHasText">
								<DoubleAnimation
									Storyboard.TargetName="PART_Message"
									Storyboard.TargetProperty="Opacity"
									From=".2"
									To="0"
									Duration="0:0:0.2" />
							</Storyboard>
							<Storyboard
								x:Key="exitHasText">
								<DoubleAnimation
									Storyboard.TargetName="PART_Message"
									Storyboard.TargetProperty="Opacity"
									Duration="0:0:0.2" />
							</Storyboard>
						</ResourceDictionary>
					</FrameworkTemplate.Resources>
					<Grid
						Background="{TemplateBinding Background}">
						<Grid
							Name="PART_InnerGrid"
							Margin="{TemplateBinding Padding}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition
									Name="TextColumn"
									Width="*" />
								<ColumnDefinition
									Name="ButtonColumn"
									Width="Auto" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition
									Height="Auto" />
								<RowDefinition
									Name="ButtonRow"
									Height="*" />
							</Grid.RowDefinitions>
							<ScrollViewer
								Name="PART_ContentHost"
								Grid.Row="1"
								Grid.Column="0"
								Margin="0"
								VerticalAlignment="Stretch"
								BorderThickness="0"
								IsTabStop="False"
								Background="{x:Null}" />
							<TextBlock
								Name="PART_Message"
								Grid.Row="1"
								Grid.Column="0"
								Margin="3 0"
								Padding="{TemplateBinding Padding}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								Foreground="{TemplateBinding Foreground}"
								Style="{DynamicResource MahApps.Metro.Styles.MetroWatermarkTextBlock}"
								Text="{TemplateBinding Controls:Watermark}"
								TextAlignment="{TemplateBinding Controls:WatermarkAlignment}"
								TextTrimming="{TemplateBinding Controls:WatermarkTrimming}"
								Visibility="Collapsed" />
							<ContentControl
								Name="PART_FloatingMessageContainer"
								Grid.Row="0"
								Grid.Column="0"
								Style="{DynamicResource FloatingMessageContainerStyle}">
								<FrameworkElement.Height>
									<MultiBinding
										Converter="{Converters:MathMultiplyConverter}">
										<Binding
											ElementName="PART_FloatingMessage"
											Mode="OneWay"
											Path="ActualHeight" />
										<Binding
											ElementName="PART_FloatingMessageContainer"
											Mode="OneWay"
											Path="Opacity" />
									</MultiBinding>
								</FrameworkElement.Height>
								<TextBlock
									Name="PART_FloatingMessage"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									Foreground="{TemplateBinding Foreground}"
									Style="{DynamicResource MetroAutoCollapsingTextBlock}"
									Text="{TemplateBinding Controls:Watermark}"
									TextAlignment="{TemplateBinding Controls:WatermarkAlignment}"
									TextTrimming="{TemplateBinding Controls:WatermarkTrimming}">
									<UIElement.RenderTransform>
										<TranslateTransform
											x:Name="FloatingMessageTransform">
											<TranslateTransform.Y>
												<MultiBinding
													Converter="{Converters:MathSubtractConverter}">
													<Binding
														ElementName="PART_FloatingMessage"
														Mode="OneWay"
														Path="ActualHeight" />
													<Binding
														ElementName="PART_FloatingMessageContainer"
														Mode="OneWay"
														Path="ActualHeight" />
												</MultiBinding>
											</TranslateTransform.Y>
										</TranslateTransform>
									</UIElement.RenderTransform>
								</TextBlock>
							</ContentControl>
							<Button
								Name="PART_ClearText"
								Grid.Row="0"
								Grid.RowSpan="2"
								Grid.Column="1"
								Width="{TemplateBinding Controls:ButtonWidth}"
								Content="{TemplateBinding Controls:ButtonContent}"
								ContentTemplate="{TemplateBinding Controls:ButtonContentTemplate}"
								Focusable="False"
								FontFamily="{TemplateBinding Controls:ButtonFontFamily}"
								FontSize="{TemplateBinding Controls:ButtonFontSize}"
								Foreground="{TemplateBinding Foreground}"
								IsTabStop="False"
								Style="{DynamicResource ChromelessButtonStyle}"
								Controls:TextBoxHelper.IsClearTextButtonBehaviorEnabled="{Binding Path=(Controls:TextBoxHelper.ClearTextButton), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
								Visibility="{Binding Path=(Controls:TextBoxHelper.ClearTextButton), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<DataTrigger
							Value=""
							Binding="{Binding Path=Text, RelativeSource={RelativeSource Self}}">
							<Setter
								TargetName="PART_Message"
								Property="Visibility"
								Value="Visible" />
						</DataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="True"
									Binding="{Binding Path=IsVisible, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="True"
									Binding="{Binding Path=(Controls:TextBoxHelper.UseFloatingWatermark), RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="True"
									Binding="{Binding Path=(Controls:TextBoxHelper.HasText), RelativeSource={RelativeSource Self}}" />
							</MultiDataTrigger.Conditions>
							<TriggerBase.EnterActions>
								<BeginStoryboard
									Storyboard="{StaticResource ShowFloatingMessageStoryboard}" />
							</TriggerBase.EnterActions>
							<TriggerBase.ExitActions>
								<BeginStoryboard
									Storyboard="{StaticResource HideFloatingMessageStoryboard}" />
							</TriggerBase.ExitActions>
						</MultiDataTrigger>
						<DataTrigger
							Value="False"
							Binding="{Binding Path=(Controls:TextBoxHelper.ClearTextButton), RelativeSource={RelativeSource Self}}">
							<Setter
								TargetName="PART_ContentHost"
								Property="ColumnSpan"
								Value="2" />
							<Setter
								TargetName="PART_Message"
								Property="ColumnSpan"
								Value="2" />
						</DataTrigger>
						<Trigger
							Property="TextBoxBase.IsReadOnly"
							Value="True">
							<Setter
								TargetName="PART_ClearText"
								Property="IsEnabled"
								Value="False" />
						</Trigger>
						<Trigger
							Property="UIElement.IsFocused"
							Value="True">
							<Setter
								TargetName="PART_FloatingMessage"
								Value="{DynamicResource AccentColorBrush}"
								Property="Foreground" />
							<Setter
								TargetName="PART_FloatingMessage"
								Property="UIElement.Opacity"
								Value="1" />
						</Trigger>
						<Trigger
							SourceName="PART_ClearText"
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="PART_ClearText"
								Value="{DynamicResource GrayBrush8}"
								Property="Background" />
							<Setter
								TargetName="PART_ClearText"
								Value="{DynamicResource AccentColorBrush}"
								Property="Foreground" />
						</Trigger>
						<Trigger
							SourceName="PART_ClearText"
							Property="IsPressed"
							Value="True">
							<Setter
								TargetName="PART_ClearText"
								Value="{DynamicResource BlackBrush}"
								Property="Background" />
							<Setter
								TargetName="PART_ClearText"
								Value="{DynamicResource WhiteBrush}"
								Property="Foreground" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="Controls:TextBoxHelper.HasText"
									Value="False" />
								<Condition
									Property="UIElement.IsFocused"
									Value="True" />
							</MultiTrigger.Conditions>
							<TriggerBase.EnterActions>
								<BeginStoryboard
									Storyboard="{StaticResource enterGotFocus}" />
							</TriggerBase.EnterActions>
							<TriggerBase.ExitActions>
								<BeginStoryboard
									Storyboard="{StaticResource exitGotFocus}" />
							</TriggerBase.ExitActions>
						</MultiTrigger>
						<Trigger
							Property="Controls:TextBoxHelper.HasText"
							Value="True">
							<TriggerBase.EnterActions>
								<BeginStoryboard
									Storyboard="{StaticResource enterHasText}" />
							</TriggerBase.EnterActions>
							<TriggerBase.ExitActions>
								<BeginStoryboard
									Storyboard="{StaticResource exitHasText}" />
							</TriggerBase.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ToggleButton}"
		x:Key="MetroComboBoxDropDownToggleButtonStyle">
		<Setter
			Property="ButtonBase.ClickMode"
			Value="Press" />
		<Setter
			Property="Focusable"
			Value="False" />
		<Setter
			Property="IsTabStop"
			Value="False" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Grid
						Name="ToggleButtonRootGrid"
						Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition
								Name="TextColumn"
								Width="*" />
							<ColumnDefinition
								Name="ButtonColumn"
								Width="Auto" />
							<ColumnDefinition
								Name="ToggleButtonColumn"
								Width="Auto" />
						</Grid.ColumnDefinitions>
						<Button
							Name="PART_ClearText"
							Grid.Column="1"
							Width="{TemplateBinding Controls:ButtonWidth}"
							Content="{TemplateBinding Controls:ButtonContent}"
							ContentTemplate="{TemplateBinding Controls:ButtonContentTemplate}"
							Focusable="False"
							FontFamily="{TemplateBinding Controls:ButtonFontFamily}"
							FontSize="{TemplateBinding Controls:ButtonFontSize}"
							Foreground="{TemplateBinding Foreground}"
							IsTabStop="False"
							Style="{DynamicResource ChromelessButtonStyle}"
							Controls:TextBoxHelper.IsClearTextButtonBehaviorEnabled="{Binding Path=(Controls:TextBoxHelper.ClearTextButton), Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
							Visibility="{Binding Path=(Controls:TextBoxHelper.ClearTextButton), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Converter={StaticResource BooleanToVisibilityConverter}}" />
						<Grid
							Name="BtnArrowBackground"
							Column="2"
							Width="{TemplateBinding Controls:ButtonWidth}"
							Background="#00FFFFFF">
							<Path
								Name="BtnArrow"
								Width="8"
								Height="4"
								HorizontalAlignment="Center"
								Data="F1 M301.14,-189.041 L311.57,-189.041 L306.355,-182.942 L301.14,-189.041"
								Fill="{DynamicResource GrayBrush1}"
								IsHitTestVisible="False"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								Stretch="Uniform" />
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							SourceName="BtnArrowBackground"
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="BtnArrowBackground"
								Value="{DynamicResource GrayBrush5}"
								Property="Background" />
						</Trigger>
						<Trigger
							SourceName="PART_ClearText"
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="PART_ClearText"
								Value="{DynamicResource GrayBrush8}"
								Property="Background" />
							<Setter
								TargetName="PART_ClearText"
								Value="{DynamicResource AccentColorBrush}"
								Property="Foreground" />
						</Trigger>
						<DataTrigger
							Value="True"
							Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}">
							<Setter
								TargetName="BtnArrowBackground"
								Value="{DynamicResource GrayBrush3}"
								Property="Background" />
							<Setter
								TargetName="ToggleButtonRootGrid"
								Value="{DynamicResource GrayBrush7}"
								Property="Background" />
						</DataTrigger>
						<Trigger
							SourceName="PART_ClearText"
							Property="IsPressed"
							Value="True">
							<Setter
								TargetName="PART_ClearText"
								Value="{DynamicResource BlackBrush}"
								Property="Background" />
							<Setter
								TargetName="PART_ClearText"
								Value="{DynamicResource WhiteBrush}"
								Property="Foreground" />
							<Setter
								TargetName="ToggleButtonRootGrid"
								Value="{DynamicResource GrayBrush7}"
								Property="Background" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ComboBox}"
		x:Key="MetroComboBox">
		<Setter
			Property="Background"
			Value="{DynamicResource ControlBackgroundBrush}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource TextBoxBorderBrush}" />
		<Setter
			Property="BorderThickness"
			Value="{DynamicResource ComboBoxBorderThemeThickness}" />
		<Setter
			Property="Controls:ControlsHelper.FocusBorderBrush"
			Value="{DynamicResource ComboBoxMouseOverInnerBorderBrush}" />
		<Setter
			Property="Controls:ControlsHelper.MouseOverBorderBrush"
			Value="{DynamicResource TextBoxMouseOverBorderBrush}" />
		<Setter
			Property="Controls:TextBoxHelper.ButtonFontSize"
			Value="{DynamicResource ClearTextButtonFontSize}" />
		<Setter
			Property="Controls:TextBoxHelper.ButtonWidth"
			Value="24" />
		<Setter
			Property="FontFamily"
			Value="{DynamicResource ContentFontFamily}" />
		<Setter
			Property="FontSize"
			Value="{DynamicResource ContentFontSize}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource TextBrush}" />
		<Setter
			Property="HorizontalContentAlignment"
			Value="Left" />
		<Setter
			Property="ItemContainerStyle"
			Value="{DynamicResource MetroComboBoxItem}" />
		<Setter
			Property="MinHeight"
			Value="26" />
		<Setter
			Property="Padding"
			Value="2" />
		<Setter
			Property="RenderOptions.ClearTypeHint"
			Value="Enabled" />
		<Setter
			Property="CanContentScroll"
			Value="False" />
		<Setter
			Property="HorizontalScrollBarVisibility"
			Value="Auto" />
		<Setter
			Property="VerticalScrollBarVisibility"
			Value="Auto" />
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ComboBox}">
					<FrameworkTemplate.Resources>
						<ResourceDictionary>
							<Storyboard
								x:Key="enterGotFocus">
								<DoubleAnimation
									Storyboard.TargetName="PART_WatermarkMessage"
									Storyboard.TargetProperty="Opacity"
									To=".2"
									Duration="0:0:0.2" />
							</Storyboard>
							<Storyboard
								x:Key="exitGotFocus">
								<DoubleAnimation
									Storyboard.TargetName="PART_WatermarkMessage"
									Storyboard.TargetProperty="Opacity"
									Duration="0:0:0.2" />
							</Storyboard>
							<Storyboard
								x:Key="enterHasText">
								<DoubleAnimation
									Storyboard.TargetName="PART_WatermarkMessage"
									Storyboard.TargetProperty="Opacity"
									From=".2"
									To="0"
									Duration="0:0:0.2" />
							</Storyboard>
							<Storyboard
								x:Key="exitHasText">
								<DoubleAnimation
									Storyboard.TargetName="PART_WatermarkMessage"
									Storyboard.TargetProperty="Opacity"
									Duration="0:0:0.2" />
							</Storyboard>
						</ResourceDictionary>
					</FrameworkTemplate.Resources>
					<Grid>
						<Border
							Name="Border"
							Grid.ColumnSpan="3"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							CornerRadius="{Binding Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<Grid
							Margin="{TemplateBinding BorderThickness}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition
									Name="TextColumn"
									Width="*" />
								<ColumnDefinition
									Name="ButtonColumn"
									Width="{Binding Path=(Controls:TextBoxHelper.ButtonWidth), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
								<ColumnDefinition
									Name="ToggleButtonColumn"
									Width="{Binding Path=(Controls:TextBoxHelper.ButtonWidth), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition
									Height="Auto" />
								<RowDefinition
									Name="ButtonRow"
									Height="*" />
							</Grid.RowDefinitions>
							<ToggleButton
								Name="PART_DropDownToggle"
								Grid.RowSpan="2"
								Grid.ColumnSpan="3"
								Margin="0"
								Padding="{TemplateBinding Padding}"
								VerticalAlignment="Stretch"
								Controls:TextBoxHelper.ButtonContent="{TemplateBinding Controls:ButtonContent}"
								Controls:TextBoxHelper.ButtonContentTemplate="{TemplateBinding Controls:ButtonContentTemplate}"
								Controls:TextBoxHelper.ButtonFontFamily="{TemplateBinding Controls:ButtonFontFamily}"
								Controls:TextBoxHelper.ButtonFontSize="{TemplateBinding Controls:ButtonFontSize}"
								Controls:TextBoxHelper.ButtonWidth="{TemplateBinding Controls:ButtonWidth}"
								Controls:TextBoxHelper.ClearTextButton="{TemplateBinding Controls:ClearTextButton}"
								Background="#00FFFFFF"
								BorderThickness="0"
								Foreground="{TemplateBinding Foreground}"
								KeyboardNavigation.IsTabStop="False"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								Style="{DynamicResource MetroComboBoxDropDownToggleButtonStyle}"
								Controls:ControlsHelper.CornerRadius="{Binding Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
								IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
							<TextBox
								Name="PART_EditableTextBox"
								Grid.Row="1"
								Grid.Column="0"
								Margin="0"
								Padding="{TemplateBinding Padding}"
								HorizontalAlignment="Stretch"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
								Controls:TextBoxHelper.ButtonContent="{TemplateBinding Controls:ButtonContent}"
								Controls:TextBoxHelper.ButtonContentTemplate="{TemplateBinding Controls:ButtonContentTemplate}"
								Controls:TextBoxHelper.ButtonFontFamily="{TemplateBinding Controls:ButtonFontFamily}"
								Controls:TextBoxHelper.ButtonFontSize="{TemplateBinding Controls:ButtonFontSize}"
								Controls:TextBoxHelper.ButtonWidth="{TemplateBinding Controls:ButtonWidth}"
								Controls:TextBoxHelper.HasText="{TemplateBinding Controls:HasText}"
								Controls:TextBoxHelper.UseFloatingWatermark="{TemplateBinding Controls:UseFloatingWatermark}"
								Controls:TextBoxHelper.Watermark="{TemplateBinding Controls:Watermark}"
								Controls:TextBoxHelper.WatermarkAlignment="{TemplateBinding Controls:WatermarkAlignment}"
								Controls:TextBoxHelper.WatermarkTrimming="{TemplateBinding Controls:WatermarkTrimming}"
								BorderThickness="0"
								Focusable="True"
								FontFamily="{TemplateBinding FontFamily}"
								FontSize="{TemplateBinding FontSize}"
								Foreground="{TemplateBinding Foreground}"
								IsReadOnly="{TemplateBinding IsReadOnly}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								Visibility="Collapsed"
								Style="{StaticResource EditableTextBoxStyle}"
								Background="{x:Null}"
								CharacterCasing="{Binding Path=(Controls:ComboBoxHelper.CharacterCasing), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
								MaxLength="{Binding Path=(Controls:ComboBoxHelper.MaxLength), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
							<TextBlock
								Name="PART_WatermarkMessage"
								Grid.Row="1"
								Grid.Column="0"
								Margin="5 0"
								Padding="{TemplateBinding Padding}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								Foreground="{TemplateBinding Foreground}"
								Style="{DynamicResource MahApps.Metro.Styles.MetroWatermarkTextBlock}"
								Text="{TemplateBinding Controls:Watermark}"
								TextAlignment="{TemplateBinding Controls:WatermarkAlignment}"
								TextTrimming="{TemplateBinding Controls:WatermarkTrimming}"
								Visibility="Collapsed" />
							<ContentControl
								Name="PART_FloatingMessageContainer"
								Grid.Row="0"
								Grid.Column="0"
								Style="{DynamicResource FloatingMessageContainerStyle}">
								<FrameworkElement.Height>
									<MultiBinding
										Converter="{Converters:MathMultiplyConverter}">
										<Binding
											ElementName="PART_FloatingMessage"
											Mode="OneWay"
											Path="ActualHeight" />
										<Binding
											ElementName="PART_FloatingMessageContainer"
											Mode="OneWay"
											Path="Opacity" />
									</MultiBinding>
								</FrameworkElement.Height>
								<TextBlock
									Name="PART_FloatingMessage"
									Margin="2 2 0 0"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									Foreground="{TemplateBinding Foreground}"
									Style="{DynamicResource MetroAutoCollapsingTextBlock}"
									Text="{TemplateBinding Controls:Watermark}"
									TextAlignment="{TemplateBinding Controls:WatermarkAlignment}"
									TextTrimming="{TemplateBinding Controls:WatermarkTrimming}">
									<UIElement.RenderTransform>
										<TranslateTransform
											x:Name="FloatingMessageTransform">
											<TranslateTransform.Y>
												<MultiBinding
													Converter="{Converters:MathSubtractConverter}">
													<Binding
														ElementName="PART_FloatingMessage"
														Mode="OneWay"
														Path="ActualHeight" />
													<Binding
														ElementName="PART_FloatingMessageContainer"
														Mode="OneWay"
														Path="ActualHeight" />
												</MultiBinding>
											</TranslateTransform.Y>
										</TranslateTransform>
									</UIElement.RenderTransform>
								</TextBlock>
							</ContentControl>
							<Grid
								Name="ContentSite"
								Row="1"
								Column="0"
								Margin="4 0">
								<ContentPresenter
									Margin="{TemplateBinding Padding}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									Content="{TemplateBinding SelectionBoxItem}"
									ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
									ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
									ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
									IsHitTestVisible="False"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Grid>
						</Grid>
						<Border
							Name="DisabledVisualElement"
							Grid.ColumnSpan="3"
							Background="{DynamicResource ControlsDisabledBrush}"
							BorderBrush="{DynamicResource ControlsDisabledBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							IsHitTestVisible="False"
							Opacity="0.6"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							Visibility="Collapsed"
							CornerRadius="{Binding Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<Popup
							Name="PART_Popup"
							AllowsTransparency="True"
							Focusable="False"
							Placement="Bottom"
							PopupAnimation="{DynamicResource SystemParameters.ComboBoxPopupAnimationKey}"
							IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
							<Grid
								MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
								MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">
								<Border
									Name="PopupBorder"
									Height="Auto"
									HorizontalAlignment="Stretch"
									Background="{DynamicResource WhiteBrush}"
									BorderBrush="{DynamicResource ComboBoxPopupBorderBrush}"
									BorderThickness="{DynamicResource ComboBoxPopupBorderThemeThickness}"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
									<ScrollViewer
										Padding="{DynamicResource ComboBoxPopupBorderThemePadding}"
										BorderThickness="0">
										<ItemsPresenter
											Name="ItemsPresenter"
											KeyboardNavigation.DirectionalNavigation="Contained" />
									</ScrollViewer>
								</Border>
							</Grid>
						</Popup>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup
								x:Name="FocusStates">
								<VisualState
									x:Name="Focused" />
								<VisualState
									x:Name="Unfocused" />
								<VisualState
									x:Name="FocusedDropDown">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames
											Storyboard.TargetName="PopupBorder"
											Storyboard.TargetProperty="(UIElement.Visibility)"
											Duration="00:00:00">
											<DiscreteObjectKeyFrame
												KeyTime="00:00:00">
												<ObjectKeyFrame.Value>
													<Visibility>Visible</Visibility>
												</ObjectKeyFrame.Value>
											</DiscreteObjectKeyFrame>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="True"
									Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="False"
									Binding="{Binding Path=ContextMenu, Converter={x:Static Converters:IsNullConverter.Instance}, RelativeSource={RelativeSource Self}}" />
							</MultiDataTrigger.Conditions>
							<Setter
								TargetName="PART_EditableTextBox"
								Property="FrameworkElement.ContextMenu"
								Value="{Binding Path=ContextMenu, RelativeSource={RelativeSource TemplatedParent}}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="False"
									Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource Self}}" />
								<Condition
									Binding="{Binding Path=SelectedItem, RelativeSource={RelativeSource Self}}"
									Value="{x:Null}" />
							</MultiDataTrigger.Conditions>
							<Setter
								TargetName="PART_WatermarkMessage"
								Property="Visibility"
								Value="Visible" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="True"
									Binding="{Binding Path=SelectedItem, Mode=OneWay, Converter={x:Static Converters:IsNullConverter.Instance}, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="True"
									Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="False"
									Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource Self}}" />
							</MultiDataTrigger.Conditions>
							<TriggerBase.EnterActions>
								<BeginStoryboard
									Storyboard="{StaticResource enterGotFocus}" />
							</TriggerBase.EnterActions>
							<TriggerBase.ExitActions>
								<BeginStoryboard
									Storyboard="{StaticResource exitGotFocus}" />
							</TriggerBase.ExitActions>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="False"
									Binding="{Binding Path=SelectedItem, Mode=OneWay, Converter={x:Static Converters:IsNullConverter.Instance}, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="False"
									Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource Self}}" />
							</MultiDataTrigger.Conditions>
							<TriggerBase.EnterActions>
								<BeginStoryboard
									Storyboard="{StaticResource enterHasText}" />
							</TriggerBase.EnterActions>
							<TriggerBase.ExitActions>
								<BeginStoryboard
									Storyboard="{StaticResource exitHasText}" />
							</TriggerBase.ExitActions>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="True"
									Binding="{Binding Path=IsVisible, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="True"
									Binding="{Binding Path=(Controls:TextBoxHelper.UseFloatingWatermark), RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="False"
									Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="False"
									Binding="{Binding Path=SelectedItem, Mode=OneWay, Converter={x:Static Converters:IsNullConverter.Instance}, RelativeSource={RelativeSource Self}}" />
							</MultiDataTrigger.Conditions>
							<TriggerBase.EnterActions>
								<BeginStoryboard
									Storyboard="{StaticResource ShowFloatingMessageStoryboard}" />
							</TriggerBase.EnterActions>
							<TriggerBase.ExitActions>
								<BeginStoryboard
									Storyboard="{StaticResource HideFloatingMessageStoryboard}" />
							</TriggerBase.ExitActions>
						</MultiDataTrigger>
						<DataTrigger
							Value="False"
							Binding="{Binding Path=(Controls:TextBoxHelper.ClearTextButton), RelativeSource={RelativeSource Self}}">
							<Setter
								TargetName="ContentSite"
								Property="ColumnSpan"
								Value="2" />
							<Setter
								TargetName="PART_EditableTextBox"
								Property="ColumnSpan"
								Value="2" />
							<Setter
								TargetName="PART_WatermarkMessage"
								Property="ColumnSpan"
								Value="2" />
						</DataTrigger>
						<Trigger
							Property="ComboBox.IsEditable"
							Value="True">
							<Setter
								Property="IsTabStop"
								Value="False" />
							<Setter
								TargetName="ContentSite"
								Property="Visibility"
								Value="Hidden" />
							<Setter
								TargetName="PART_DropDownToggle"
								Property="Background"
								Value="{x:Null}" />
							<Setter
								TargetName="PART_DropDownToggle"
								Property="Focusable"
								Value="False" />
							<Setter
								TargetName="PART_EditableTextBox"
								Property="Visibility"
								Value="Visible" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="ComboBox.IsEditable"
									Value="False" />
								<Condition
									Property="UIElement.IsMouseOver"
									Value="True" />
							</MultiTrigger.Conditions>
							<Setter
								Value="{DynamicResource GrayBrush9}"
								Property="Background" />
						</MultiTrigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="Border"
								Property="BorderBrush"
								Value="{Binding Path=(Controls:ControlsHelper.MouseOverBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<Trigger
							SourceName="PART_EditableTextBox"
							Property="UIElement.IsFocused"
							Value="True">
							<Setter
								TargetName="Border"
								Property="BorderBrush"
								Value="{Binding Path=(Controls:ControlsHelper.FocusBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<Trigger
							Property="UIElement.IsFocused"
							Value="True">
							<Setter
								TargetName="Border"
								Property="BorderBrush"
								Value="{Binding Path=(Controls:ControlsHelper.FocusBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter
								TargetName="PART_FloatingMessage"
								Value="{DynamicResource AccentColorBrush}"
								Property="Foreground" />
							<Setter
								TargetName="PART_FloatingMessage"
								Property="UIElement.Opacity"
								Value="1" />
						</Trigger>
						<Trigger
							Property="UIElement.IsKeyboardFocusWithin"
							Value="True">
							<Setter
								TargetName="Border"
								Property="BorderBrush"
								Value="{Binding Path=(Controls:ControlsHelper.FocusBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="DisabledVisualElement"
								Property="Visibility"
								Value="Visible" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="Validation.ErrorTemplate"
			Value="{DynamicResource ValidationErrorTemplate}" />
		<Setter
			Property="VerticalContentAlignment"
			Value="Center" />
	</Style>
	<Style
		BasedOn="{StaticResource MetroComboBox}"
		TargetType="{x:Type ComboBox}"
		x:Key="VirtualisedMetroComboBox">
		<Setter
			Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<VirtualizingStackPanel
						IsItemsHost="True"
						IsVirtualizing="True"
						KeyboardNavigation.DirectionalNavigation="Contained"
						VirtualizationMode="Recycling" />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="CanContentScroll"
			Value="True" />
		<Style.Triggers>
			<Trigger
				Property="ItemsControl.IsGrouping"
				Value="True">
				<Setter
					Property="CanContentScroll"
					Value="False" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		TargetType="{x:Type ComboBoxItem}"
		x:Key="MetroComboBoxItem">
		<Setter
			Property="Background"
			Value="{DynamicResource WhiteBrush}" />
		<Setter
			Property="BorderThickness"
			Value="0" />
		<Setter
			Property="Controls:ItemHelper.ActiveSelectionBackgroundBrush"
			Value="{DynamicResource AccentColorBrush}" />
		<Setter
			Property="Controls:ItemHelper.ActiveSelectionForegroundBrush"
			Value="{DynamicResource AccentSelectedColorBrush}" />
		<Setter
			Property="Controls:ItemHelper.DisabledForegroundBrush"
			Value="{DynamicResource GrayNormalBrush}" />
		<Setter
			Property="Controls:ItemHelper.DisabledSelectedBackgroundBrush"
			Value="{DynamicResource GrayBrush7}" />
		<Setter
			Property="Controls:ItemHelper.DisabledSelectedForegroundBrush"
			Value="{DynamicResource AccentSelectedColorBrush}" />
		<Setter
			Property="Controls:ItemHelper.HoverBackgroundBrush"
			Value="{DynamicResource AccentColorBrush3}" />
		<Setter
			Property="Controls:ItemHelper.HoverSelectedBackgroundBrush"
			Value="{DynamicResource AccentColorBrush}" />
		<Setter
			Property="Controls:ItemHelper.SelectedBackgroundBrush"
			Value="{DynamicResource AccentColorBrush2}" />
		<Setter
			Property="Controls:ItemHelper.SelectedForegroundBrush"
			Value="{DynamicResource AccentSelectedColorBrush}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource TextBrush}" />
		<Setter
			Property="HorizontalContentAlignment"
			Value="Left" />
		<Setter
			Property="MinHeight"
			Value="22" />
		<Setter
			Property="Padding"
			Value="2" />
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ComboBoxItem}">
					<Grid
						Background="{TemplateBinding Background}"
						RenderOptions.ClearTypeHint="{TemplateBinding ClearTypeHint}">
						<Border
							Name="Border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						<Grid
							Margin="{TemplateBinding BorderThickness}">
							<ContentPresenter
								Name="contentPresenter"
								Margin="{TemplateBinding Padding}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ListBoxItem.IsSelected"
							Value="True">
							<Setter
								Property="Foreground"
								Value="{Binding Path=(Controls:ItemHelper.SelectedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
							<Setter
								TargetName="Border"
								Property="Background"
								Value="{Binding Path=(Controls:ItemHelper.SelectedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="ListBoxItem.IsSelected"
									Value="True" />
								<Condition
									Property="Selector.IsSelectionActive"
									Value="True" />
							</MultiTrigger.Conditions>
							<Setter
								Property="Foreground"
								Value="{Binding Path=(Controls:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
							<Setter
								TargetName="Border"
								Property="Background"
								Value="{Binding Path=(Controls:ItemHelper.ActiveSelectionBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="UIElement.IsMouseOver"
									Value="True" />
								<Condition
									Property="ListBoxItem.IsSelected"
									Value="True" />
							</MultiTrigger.Conditions>
							<Setter
								TargetName="Border"
								Property="Background"
								Value="{Binding Path=(Controls:ItemHelper.HoverSelectedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="UIElement.IsMouseOver"
									Value="True" />
								<Condition
									Property="ListBoxItem.IsSelected"
									Value="False" />
							</MultiTrigger.Conditions>
							<Setter
								TargetName="Border"
								Property="Background"
								Value="{Binding Path=(Controls:ItemHelper.HoverBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						</MultiTrigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Property="Foreground"
								Value="{Binding Path=(Controls:ItemHelper.DisabledForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
							<Setter
								TargetName="Border"
								Property="Background"
								Value="{Binding Path=(Controls:ItemHelper.DisabledBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="IsEnabled"
									Value="False" />
								<Condition
									Property="ListBoxItem.IsSelected"
									Value="True" />
							</MultiTrigger.Conditions>
							<Setter
								Property="Foreground"
								Value="{Binding Path=(Controls:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
							<Setter
								TargetName="Border"
								Property="Background"
								Value="{Binding Path=(Controls:ItemHelper.DisabledSelectedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="VerticalContentAlignment"
			Value="Center" />
		<Style.Triggers>
			<Trigger
				Property="UIElement.IsVisible"
				Value="True">
				<Setter
					Property="RenderOptions.ClearTypeHint"
					Value="{Binding Path=(RenderOptions.ClearTypeHint), FallbackValue=Auto, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}}" />
			</Trigger>
		</Style.Triggers>
	</Style>
</ResourceDictionary>
