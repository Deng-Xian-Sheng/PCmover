<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Controls="clr-namespace:MahApps.Metro.Controls" xmlns:Converters="clr-namespace:MahApps.Metro.Converters">
	<PathGeometry
		Figures="M0,0 L0,6 L6,0 z"
		x:Key="TreeArrow" />
	<Style
		TargetType="{x:Type ToggleButton}"
		x:Key="ExpandCollapseToggleStyle">
		<Setter
			Property="Background"
			Value="#00FFFFFF" />
		<Setter
			Property="Focusable"
			Value="False" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource BlackBrush}" />
		<Setter
			Property="Height"
			Value="16" />
		<Setter
			Property="Margin"
			Value="1" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Grid
						Width="16"
						Height="16"
						Margin="{TemplateBinding Margin}"
						Background="#00FFFFFF">
						<Path
							Name="ExpandPath"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Fill="{TemplateBinding Background}"
							Stroke="{TemplateBinding Foreground}"
							Data="{StaticResource TreeArrow}">
							<UIElement.RenderTransform>
								<RotateTransform
									Angle="135"
									CenterX="3"
									CenterY="3" />
							</UIElement.RenderTransform>
						</Path>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="True">
							<Setter
								TargetName="ExpandPath"
								Value="{DynamicResource GrayBrush1}"
								Property="Fill" />
							<Setter
								TargetName="ExpandPath"
								Property="RenderTransform">
								<Setter.Value>
									<RotateTransform
										Angle="180"
										CenterX="3"
										CenterY="3" />
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="ExpandPath"
								Value="{DynamicResource GrayBrush5}"
								Property="Stroke" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="IsEnabled"
									Value="False" />
								<Condition
									Property="ToggleButton.IsChecked"
									Value="True" />
							</MultiTrigger.Conditions>
							<Setter
								TargetName="ExpandPath"
								Value="{DynamicResource GrayBrush5}"
								Property="Fill" />
							<Setter
								TargetName="ExpandPath"
								Value="{DynamicResource GrayBrush5}"
								Property="Stroke" />
						</MultiTrigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="ExpandPath"
								Value="{DynamicResource AccentColorBrush}"
								Property="Fill" />
							<Setter
								TargetName="ExpandPath"
								Value="{DynamicResource AccentColorBrush}"
								Property="Stroke" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="Width"
			Value="16" />
	</Style>
	<Style
		x:Key="TreeViewItemFocusVisual">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle
						Margin="0"
						Opacity="0"
						SnapsToDevicePixels="True"
						Stroke="{DynamicResource SystemColors.ControlTextBrushKey}"
						StrokeDashArray="1 2"
						StrokeThickness="5" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Converters:TreeViewMarginConverter
		Length="12"
		x:Key="LengthConverter" />
	<Style
		TargetType="{x:Type TreeViewItem}"
		x:Key="MetroTreeViewItem">
		<Setter
			Property="Background"
			Value="{DynamicResource WhiteBrush}" />
		<Setter
			Property="Controls:ItemHelper.ActiveSelectionBackgroundBrush"
			Value="{DynamicResource AccentColorBrush}" />
		<Setter
			Property="Controls:ItemHelper.ActiveSelectionForegroundBrush"
			Value="{DynamicResource AccentSelectedColorBrush}" />
		<Setter
			Property="Controls:ItemHelper.DisabledForegroundBrush"
			Value="{DynamicResource GrayNormalBrush}" />
		<Setter
			Property="Controls:ItemHelper.DisabledSelectedBackgroundBrush"
			Value="{DynamicResource GrayBrush7}" />
		<Setter
			Property="Controls:ItemHelper.DisabledSelectedForegroundBrush"
			Value="{DynamicResource AccentSelectedColorBrush}" />
		<Setter
			Property="Controls:ItemHelper.HoverBackgroundBrush"
			Value="{DynamicResource AccentColorBrush3}" />
		<Setter
			Property="Controls:ItemHelper.HoverSelectedBackgroundBrush"
			Value="{DynamicResource AccentColorBrush}" />
		<Setter
			Property="Controls:ItemHelper.SelectedBackgroundBrush"
			Value="{DynamicResource AccentColorBrush2}" />
		<Setter
			Property="Controls:ItemHelper.SelectedForegroundBrush"
			Value="{DynamicResource AccentSelectedColorBrush}" />
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{x:Null}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource TextBrush}" />
		<Setter
			Property="HorizontalContentAlignment"
			Value="{Binding HorizontalContentAlignment, Mode=OneWay, FallbackValue=Stretch, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter
			Property="MinHeight"
			Value="25" />
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type TreeViewItem}">
					<StackPanel>
						<Border
							Name="Border"
							MinHeight="{TemplateBinding MinHeight}"
							Padding="{TemplateBinding Padding}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
							<Grid
								VerticalAlignment="Stretch"
								Background="#00FFFFFF"
								Margin="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource LengthConverter}}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition
										Width="Auto"
										MinWidth="19" />
									<ColumnDefinition
										Width="*" />
								</Grid.ColumnDefinitions>
								<ToggleButton
									Name="Expander"
									ClickMode="Press"
									Style="{StaticResource ExpandCollapseToggleStyle}"
									IsChecked="{Binding Path=IsExpanded, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}" />
								<ContentPresenter
									Name="PART_Header"
									Grid.Column="1"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									ContentSource="Header"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Grid>
						</Border>
						<ItemsPresenter
							Name="ItemsHost"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</StackPanel>
					<ControlTemplate.Triggers>
						<Trigger
							Property="TreeViewItem.IsExpanded"
							Value="False">
							<Setter
								TargetName="ItemsHost"
								Property="Visibility"
								Value="Collapsed" />
						</Trigger>
						<Trigger
							Property="ItemsControl.HasItems"
							Value="False">
							<Setter
								TargetName="Expander"
								Property="Visibility"
								Value="Hidden" />
						</Trigger>
						<Trigger
							Property="TreeViewItem.IsSelected"
							Value="True">
							<Setter
								Property="Foreground"
								Value="{Binding Path=(Controls:ItemHelper.SelectedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
							<Setter
								TargetName="Border"
								Property="Background"
								Value="{Binding Path=(Controls:ItemHelper.SelectedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="TreeViewItem.IsSelected"
									Value="True" />
								<Condition
									Property="Selector.IsSelectionActive"
									Value="True" />
							</MultiTrigger.Conditions>
							<Setter
								Property="Foreground"
								Value="{Binding Path=(Controls:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
							<Setter
								TargetName="Border"
								Property="Background"
								Value="{Binding Path=(Controls:ItemHelper.ActiveSelectionBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									SourceName="Border"
									Property="UIElement.IsMouseOver"
									Value="True" />
								<Condition
									Property="TreeViewItem.IsSelected"
									Value="True" />
							</MultiTrigger.Conditions>
							<Setter
								TargetName="Border"
								Property="Background"
								Value="{Binding Path=(Controls:ItemHelper.HoverSelectedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									SourceName="Border"
									Property="UIElement.IsMouseOver"
									Value="True" />
								<Condition
									Property="TreeViewItem.IsSelected"
									Value="False" />
							</MultiTrigger.Conditions>
							<Setter
								TargetName="Border"
								Property="Background"
								Value="{Binding Path=(Controls:ItemHelper.HoverBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						</MultiTrigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Property="Foreground"
								Value="{Binding Path=(Controls:ItemHelper.DisabledForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
							<Setter
								TargetName="Border"
								Property="Background"
								Value="{Binding Path=(Controls:ItemHelper.DisabledBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="IsEnabled"
									Value="False" />
								<Condition
									Property="TreeViewItem.IsSelected"
									Value="True" />
							</MultiTrigger.Conditions>
							<MultiTrigger.Setters>
								<Setter
									Property="Foreground"
									Value="{Binding Path=(Controls:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
								<Setter
									TargetName="Border"
									Property="Background"
									Value="{Binding Path=(Controls:ItemHelper.DisabledSelectedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
							</MultiTrigger.Setters>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="VerticalContentAlignment"
			Value="{Binding VerticalContentAlignment, Mode=OneWay, FallbackValue=Center, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Style.Triggers>
			<Trigger
				Property="VirtualizingPanel.IsVirtualizing"
				Value="True">
				<Setter
					Property="ItemsPanel">
					<Setter.Value>
						<ItemsPanelTemplate>
							<VirtualizingStackPanel />
						</ItemsPanelTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		TargetType="{x:Type TreeView}"
		x:Key="MetroTreeView">
		<Setter
			Property="Background"
			Value="{DynamicResource WhiteBrush}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource BlackBrush}" />
		<Setter
			Property="BorderThickness"
			Value="0" />
		<Setter
			Property="HorizontalContentAlignment"
			Value="Stretch" />
		<Setter
			Property="Padding"
			Value="1" />
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type TreeView}">
					<Border
						Name="Border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<ScrollViewer
							Name="TreeViewScrollViewer"
							Padding="{TemplateBinding Padding}"
							CanContentScroll="{TemplateBinding CanContentScroll}"
							Focusable="False"
							HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}">
							<ItemsPresenter />
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="VerticalContentAlignment"
			Value="Center" />
		<Style.Triggers>
			<Trigger
				Property="VirtualizingPanel.IsVirtualizing"
				Value="True">
				<Setter
					Property="ItemsPanel">
					<Setter.Value>
						<ItemsPanelTemplate>
							<VirtualizingStackPanel />
						</ItemsPanelTemplate>
					</Setter.Value>
				</Setter>
				<Setter
					Property="CanContentScroll"
					Value="True" />
			</Trigger>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Property="BorderBrush"
					Value="{DynamicResource GrayBrush9}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		BasedOn="{StaticResource MetroTreeView}"
		TargetType="{x:Type TreeView}"
		x:Key="VirtualisedMetroTreeView">
		<Setter
			Property="VirtualizingPanel.IsVirtualizing"
			Value="True" />
		<Setter
			Property="VirtualizingPanel.VirtualizationMode"
			Value="Recycling" />
	</Style>
</ResourceDictionary>
