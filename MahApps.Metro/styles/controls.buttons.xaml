<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Controls="clr-namespace:MahApps.Metro.Controls" xmlns:converters="clr-namespace:MahApps.Metro.Converters">
	<converters:ThicknessToDoubleConverter
		TakeThicknessSide="Left"
		x:Key="BorderThicknessToStrokeThicknessConverter" />
	<Style
		x:Key="MahApps.Metro.Styles.FlatButtonFocusVisualStyle">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle
						Margin="2"
						SnapsToDevicePixels="True"
						Stroke="{DynamicResource FlatButtonForegroundBrush}"
						StrokeDashArray="1 2"
						StrokeThickness="1"
						UseLayoutRounding="True" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type Button}"
		x:Key="MetroFlatButton">
		<Setter
			Property="Background"
			Value="{DynamicResource FlatButtonBackgroundBrush}" />
		<Setter
			Property="BorderThickness"
			Value="0" />
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{DynamicResource MahApps.Metro.Styles.FlatButtonFocusVisualStyle}" />
		<Setter
			Property="FontSize"
			Value="{DynamicResource FlatButtonFontSize}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource FlatButtonForegroundBrush}" />
		<Setter
			Property="Padding"
			Value="10 5 10 5" />
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Button}">
					<Border
						Name="Border"
						Margin="0"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<Controls:ContentControlEx
							Name="PART_ContentPresenter"
							Padding="{TemplateBinding Padding}"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							Content="{TemplateBinding Content}"
							ContentStringFormat="{TemplateBinding ContentStringFormat}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger
				Property="UIElement.IsMouseOver"
				Value="True">
				<Setter
					Property="Background"
					Value="#FFA9A9A9" />
			</Trigger>
			<Trigger
				Property="IsPressed"
				Value="True">
				<Setter
					Property="Background"
					Value="{DynamicResource FlatButtonPressedBackgroundBrush}" />
				<Setter
					Property="Foreground"
					Value="{DynamicResource FlatButtonPressedForegroundBrush}" />
			</Trigger>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Property="Foreground"
					Value="{DynamicResource GrayBrush2}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		TargetType="{x:Type ToggleButton}"
		x:Key="MetroFlatToggleButton">
		<Setter
			Property="Background"
			Value="{DynamicResource FlatButtonBackgroundBrush}" />
		<Setter
			Property="BorderThickness"
			Value="0" />
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{DynamicResource MahApps.Metro.Styles.FlatButtonFocusVisualStyle}" />
		<Setter
			Property="FontSize"
			Value="{DynamicResource FlatButtonFontSize}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource FlatButtonForegroundBrush}" />
		<Setter
			Property="Padding"
			Value="10 5 10 5" />
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Border
						Name="Border"
						Margin="0"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<Controls:ContentControlEx
							Name="PART_ContentPresenter"
							Padding="{TemplateBinding Padding}"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							Content="{TemplateBinding Content}"
							ContentStringFormat="{TemplateBinding ContentStringFormat}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger
				Property="ToggleButton.IsChecked"
				Value="True">
				<Setter
					Property="Background"
					Value="{DynamicResource AccentColorBrush}" />
				<Setter
					Property="Foreground"
					Value="{DynamicResource FlatButtonPressedForegroundBrush}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition
						Property="UIElement.IsMouseOver"
						Value="True" />
					<Condition
						Property="ToggleButton.IsChecked"
						Value="False" />
				</MultiTrigger.Conditions>
				<Setter
					Property="Background"
					Value="#FFA9A9A9" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition
						Property="UIElement.IsMouseOver"
						Value="True" />
					<Condition
						Property="ToggleButton.IsChecked"
						Value="True" />
				</MultiTrigger.Conditions>
				<Setter
					Property="Background"
					Value="{DynamicResource AccentColorBrush2}" />
				<Setter
					Property="Foreground"
					Value="{DynamicResource FlatButtonPressedForegroundBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition
						Property="IsPressed"
						Value="True" />
					<Condition
						Property="ToggleButton.IsChecked"
						Value="False" />
				</MultiTrigger.Conditions>
				<Setter
					Property="Background"
					Value="{DynamicResource FlatButtonPressedBackgroundBrush}" />
				<Setter
					Property="Foreground"
					Value="{DynamicResource FlatButtonPressedForegroundBrush}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition
						Property="IsPressed"
						Value="True" />
					<Condition
						Property="ToggleButton.IsChecked"
						Value="True" />
				</MultiTrigger.Conditions>
				<Setter
					Property="Background"
					Value="{DynamicResource AccentColorBrush3}" />
				<Setter
					Property="Foreground"
					Value="{DynamicResource FlatButtonPressedForegroundBrush}" />
			</MultiTrigger>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Property="Foreground"
					Value="{DynamicResource GrayBrush2}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		x:Key="MahApps.Metro.Styles.CircleButtonFocusVisualStyle">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Control}">
					<Ellipse
						Margin="3"
						SnapsToDevicePixels="True"
						Stroke="{DynamicResource BlackBrush}"
						StrokeDashArray="2 2"
						StrokeThickness="1"
						UseLayoutRounding="True" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		BasedOn="{StaticResource MahApps.Metro.Styles.CircleButtonFocusVisualStyle}"
		x:Key="MahApps.Metro.Styles.MetroCircleFocusVisual" />
	<Style
		x:Key="MetroCircleButtonFocusVisual">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Control}">
					<Ellipse
						Margin="8"
						SnapsToDevicePixels="True"
						Stroke="{DynamicResource BlackBrush}"
						StrokeDashArray="2 2"
						StrokeThickness="1" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ButtonBase}"
		x:Key="MahApps.Metro.Styles.MetroCircleButtonStyle">
		<Setter
			Property="Background"
			Value="#00FFFFFF" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource GrayBrush3}" />
		<Setter
			Property="BorderThickness"
			Value="2" />
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{StaticResource MahApps.Metro.Styles.CircleButtonFocusVisualStyle}" />
		<Setter
			Property="HorizontalContentAlignment"
			Value="Center" />
		<Setter
			Property="Padding"
			Value="1" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ButtonBase}">
					<Grid>
						<Ellipse
							Fill="{TemplateBinding Background}"
							StrokeThickness="0" />
						<Ellipse
							Name="ellipsebg"
							Fill="{DynamicResource BlackBrush}"
							Opacity="0"
							StrokeThickness="0" />
						<Ellipse
							Name="ellipse"
							Stroke="{TemplateBinding BorderBrush}"
							StrokeThickness="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=BorderThickness, Converter={StaticResource BorderThicknessToStrokeThicknessConverter}}" />
						<ContentPresenter
							Name="PART_ContentPresenter"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="IsPressed"
							Value="True">
							<TriggerBase.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="ellipsebg"
											Storyboard.TargetProperty="Opacity"
											From="0"
											To="0.3"
											Duration="0:0:0" />
									</Storyboard>
								</BeginStoryboard>
							</TriggerBase.EnterActions>
							<TriggerBase.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="ellipsebg"
											Storyboard.TargetProperty="Opacity"
											To="0"
											Duration="0:0:0.5" />
									</Storyboard>
								</BeginStoryboard>
							</TriggerBase.ExitActions>
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="ellipse"
								Property="UIElement.Opacity"
								Value="1" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="False">
							<Setter
								TargetName="ellipse"
								Property="UIElement.Opacity"
								Value="0.7" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="PART_ContentPresenter"
								Value="{DynamicResource GrayBrush7}"
								Property="Foreground" />
							<Setter
								TargetName="ellipse"
								Property="UIElement.Opacity"
								Value="0.3" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="VerticalContentAlignment"
			Value="Center" />
	</Style>
	<Style
		BasedOn="{StaticResource MahApps.Metro.Styles.MetroCircleButtonStyle}"
		TargetType="{x:Type ButtonBase}"
		x:Key="MetroCircleButtonStyle">
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{StaticResource MetroCircleButtonFocusVisual}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ButtonBase}">
					<Grid>
						<Ellipse
							Margin="4"
							Fill="{TemplateBinding Background}"
							StrokeThickness="0" />
						<Ellipse
							Name="ellipsebg"
							Margin="4"
							Fill="{DynamicResource BlackBrush}"
							Opacity="0"
							StrokeThickness="0" />
						<Ellipse
							Name="ellipse"
							Margin="4"
							Stroke="{TemplateBinding BorderBrush}"
							StrokeThickness="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=BorderThickness, Converter={StaticResource BorderThicknessToStrokeThicknessConverter}}" />
						<ContentPresenter
							Name="PART_ContentPresenter"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="IsPressed"
							Value="True">
							<TriggerBase.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="ellipsebg"
											Storyboard.TargetProperty="Opacity"
											From="0"
											To="0.3"
											Duration="0:0:0" />
									</Storyboard>
								</BeginStoryboard>
							</TriggerBase.EnterActions>
							<TriggerBase.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="ellipsebg"
											Storyboard.TargetProperty="Opacity"
											To="0"
											Duration="0:0:0.5" />
									</Storyboard>
								</BeginStoryboard>
							</TriggerBase.ExitActions>
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="ellipse"
								Property="UIElement.Opacity"
								Value="1" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="False">
							<Setter
								TargetName="ellipse"
								Property="UIElement.Opacity"
								Value="0.7" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="PART_ContentPresenter"
								Value="{DynamicResource GrayBrush7}"
								Property="Foreground" />
							<Setter
								TargetName="ellipse"
								Property="UIElement.Opacity"
								Value="0.3" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate
		TargetType="{x:Type ButtonBase}"
		x:Key="ChromelessButtonTemplate">
		<Grid
			Background="{TemplateBinding Background}">
			<ContentPresenter
				Name="PART_ContentPresenter"
				Margin="{TemplateBinding Padding}"
				HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
				VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
				Opacity="0.75"
				RecognizesAccessKey="True"
				SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger
				Property="UIElement.IsMouseOver"
				Value="True">
				<Setter
					TargetName="PART_ContentPresenter"
					Property="UIElement.Opacity"
					Value="1" />
			</Trigger>
			<Trigger
				Property="UIElement.IsMouseOver"
				Value="False">
				<Setter
					TargetName="PART_ContentPresenter"
					Property="UIElement.Opacity"
					Value=".5" />
			</Trigger>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Property="Foreground"
					Value="#ADADAD" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style
		TargetType="{x:Type ButtonBase}"
		x:Key="ChromelessButtonStyle">
		<Setter
			Property="Background"
			Value="{DynamicResource TransparentWhiteBrush}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource SystemColors.ControlTextBrushKey}" />
		<Setter
			Property="HorizontalContentAlignment"
			Value="Center" />
		<Setter
			Property="Padding"
			Value="0" />
		<Setter
			Property="Template"
			Value="{StaticResource ChromelessButtonTemplate}" />
		<Setter
			Property="VerticalContentAlignment"
			Value="Center" />
	</Style>
	<Style
		TargetType="{x:Type Button}"
		x:Key="BaseMetroWindowButtonStyle">
		<Setter
			Property="Background"
			Value="{DynamicResource TransparentWhiteBrush}" />
		<Setter
			Property="Foreground"
			Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
		<Setter
			Property="HorizontalContentAlignment"
			Value="Center" />
		<Setter
			Property="Padding"
			Value="1" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Button}">
					<Grid
						Background="{TemplateBinding Background}">
						<Controls:ContentControlEx
							Name="PART_ContentPresenter"
							Padding="{TemplateBinding Padding}"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							Content="{TemplateBinding Content}"
							ContentStringFormat="{TemplateBinding ContentStringFormat}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
							Opacity="0.6"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="PART_ContentPresenter"
								Property="UIElement.Opacity"
								Value="1" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="VerticalContentAlignment"
			Value="Center" />
		<Style.Triggers>
			<Trigger
				Property="UIElement.IsMouseOver"
				Value="True">
				<Setter
					Property="Background"
					Value="{DynamicResource SemiTransparentWhiteBrush}" />
			</Trigger>
			<Trigger
				Property="IsPressed"
				Value="True">
				<Setter
					Property="Background"
					Value="{DynamicResource AccentColorBrush}" />
				<Setter
					Property="Foreground"
					Value="#FFFFFFFF" />
			</Trigger>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Property="Foreground"
					Value="{DynamicResource IdealForegroundDisabledBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		BasedOn="{StaticResource BaseMetroWindowButtonStyle}"
		TargetType="{x:Type Button}"
		x:Key="MetroBaseWindowButtonStyle" />
	<Style
		BasedOn="{StaticResource MetroBaseWindowButtonStyle}"
		TargetType="{x:Type Button}"
		x:Key="MetroWindowButtonStyle">
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{x:Null}" />
		<Setter
			Property="IsTabStop"
			Value="False" />
		<Setter
			Property="MaxHeight"
			Value="34" />
		<Setter
			Property="Padding"
			Value="0" />
		<Setter
			Property="Width"
			Value="34" />
	</Style>
	<Style
		BasedOn="{StaticResource BaseMetroWindowButtonStyle}"
		TargetType="{x:Type Button}"
		x:Key="LightMetroWindowButtonStyle">
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{x:Null}" />
		<Setter
			Property="Focusable"
			Value="False" />
		<Setter
			Property="IsTabStop"
			Value="False" />
		<Setter
			Property="MaxHeight"
			Value="34" />
		<Setter
			Property="Padding"
			Value="0" />
		<Setter
			Property="Width"
			Value="34" />
		<Style.Triggers>
			<Trigger
				Property="UIElement.IsMouseOver"
				Value="True">
				<Setter
					Property="Background"
					Value="{DynamicResource SemiTransparentWhiteBrush}" />
			</Trigger>
			<Trigger
				Property="IsPressed"
				Value="True">
				<Setter
					Property="Background"
					Value="{DynamicResource AccentColorBrush}" />
				<Setter
					Property="Foreground"
					Value="#FFFFFFFF" />
			</Trigger>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Property="Foreground"
					Value="{DynamicResource IdealForegroundDisabledBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		BasedOn="{StaticResource LightMetroWindowButtonStyle}"
		TargetType="{x:Type Button}"
		x:Key="DarkMetroWindowButtonStyle">
		<Style.Triggers>
			<Trigger
				Property="UIElement.IsMouseOver"
				Value="True">
				<Setter
					Property="Background"
					Value="{DynamicResource SemiTransparentGreyBrush}" />
			</Trigger>
			<Trigger
				Property="IsPressed"
				Value="True">
				<Setter
					Property="Background"
					Value="{DynamicResource AccentColorBrush}" />
				<Setter
					Property="Foreground"
					Value="#FFFFFFFF" />
			</Trigger>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Property="Foreground"
					Value="{DynamicResource DarkIdealForegroundDisabledBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		BasedOn="{StaticResource LightMetroWindowButtonStyle}"
		TargetType="{x:Type Button}"
		x:Key="MahApps.Metro.Styles.WindowButton.Close.Light.Win10">
		<Style.Triggers>
			<Trigger
				Property="UIElement.IsMouseOver"
				Value="True">
				<Setter
					Property="Background"
					Value="#E81123" />
			</Trigger>
			<Trigger
				Property="IsPressed"
				Value="True">
				<Setter
					Property="Background"
					Value="#F1707A" />
				<Setter
					Property="Foreground"
					Value="#FF000000" />
			</Trigger>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Property="Foreground"
					Value="{DynamicResource IdealForegroundDisabledBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		BasedOn="{StaticResource DarkMetroWindowButtonStyle}"
		TargetType="{x:Type Button}"
		x:Key="MahApps.Metro.Styles.WindowButton.Close.Dark.Win10">
		<Style.Triggers>
			<Trigger
				Property="UIElement.IsMouseOver"
				Value="True">
				<Setter
					Property="Background"
					Value="#E81123" />
			</Trigger>
			<Trigger
				Property="IsPressed"
				Value="True">
				<Setter
					Property="Background"
					Value="#F1707A" />
				<Setter
					Property="Foreground"
					Value="#FF000000" />
			</Trigger>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Property="Foreground"
					Value="{DynamicResource DarkIdealForegroundDisabledBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		TargetType="{x:Type ButtonBase}"
		x:Key="MahApps.Metro.Styles.MetroButton">
		<Setter
			Property="Background"
			Value="{DynamicResource GrayBrush10}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource TextBoxBorderBrush}" />
		<Setter
			Property="BorderThickness"
			Value="1" />
		<Setter
			Property="Controls:ControlsHelper.ContentCharacterCasing"
			Value="Upper" />
		<Setter
			Property="Controls:ControlsHelper.CornerRadius"
			Value="3" />
		<Setter
			Property="FontFamily"
			Value="{DynamicResource DefaultFont}" />
		<Setter
			Property="FontSize"
			Value="{DynamicResource UpperCaseContentFontSize}" />
		<Setter
			Property="FontWeight"
			Value="Bold" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource BlackBrush}" />
		<Setter
			Property="MinHeight"
			Value="25" />
		<Setter
			Property="Padding"
			Value="5 6" />
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ButtonBase}">
					<Grid>
						<Border
							Name="Border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							CornerRadius="{Binding Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<Border
							Name="DisabledVisualElement"
							Background="{DynamicResource ControlsDisabledBrush}"
							IsHitTestVisible="False"
							Opacity="0"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							CornerRadius="{Binding Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<Controls:ContentControlEx
							Name="PART_ContentPresenter"
							Margin="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							Content="{TemplateBinding Content}"
							ContentStringFormat="{TemplateBinding ContentStringFormat}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="Border"
								Value="{DynamicResource GrayBrush8}"
								Property="Background" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								TargetName="Border"
								Value="{DynamicResource GrayBrush7}"
								Property="Background" />
						</Trigger>
						<Trigger
							Property="UIElement.IsKeyboardFocusWithin"
							Value="True">
							<Setter
								TargetName="Border"
								Value="{DynamicResource ButtonMouseOverBorderBrush}"
								Property="BorderBrush" />
							<Setter
								TargetName="Border"
								Property="BorderThickness"
								Value="2" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="DisabledVisualElement"
								Property="UIElement.Opacity"
								Value="0.7" />
							<Setter
								TargetName="PART_ContentPresenter"
								Property="UIElement.Opacity"
								Value="0.3" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		BasedOn="{StaticResource MahApps.Metro.Styles.MetroButton}"
		TargetType="{x:Type ButtonBase}"
		x:Key="MetroButton">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ButtonBase}">
					<Grid>
						<Border
							Name="Background"
							Background="{TemplateBinding Background}"
							CornerRadius="{Binding Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<Border
							Name="Border"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							Background="{x:Null}"
							CornerRadius="{Binding Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<Border
							Name="DisabledVisualElement"
							Background="{DynamicResource ControlsDisabledBrush}"
							IsHitTestVisible="False"
							Opacity="0"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							CornerRadius="{Binding Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<Controls:ContentControlEx
							Name="PART_ContentPresenter"
							Padding="{TemplateBinding Padding}"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							Content="{TemplateBinding Content}"
							ContentStringFormat="{TemplateBinding ContentStringFormat}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="Background"
								Value="{DynamicResource GrayBrush8}"
								Property="Background" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								TargetName="Background"
								Value="{DynamicResource GrayBrush7}"
								Property="Background" />
						</Trigger>
						<Trigger
							Property="UIElement.IsKeyboardFocusWithin"
							Value="True">
							<Setter
								TargetName="Border"
								Value="{DynamicResource ButtonMouseOverBorderBrush}"
								Property="BorderBrush" />
							<Setter
								TargetName="Border"
								Property="BorderThickness"
								Value="2" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="DisabledVisualElement"
								Property="UIElement.Opacity"
								Value="0.7" />
							<Setter
								TargetName="PART_ContentPresenter"
								Property="UIElement.Opacity"
								Value="0.3" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ButtonBase}"
		x:Key="SquareButtonStyle">
		<Setter
			Property="Background"
			Value="{DynamicResource WhiteBrush}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource BlackBrush}" />
		<Setter
			Property="BorderThickness"
			Value="2" />
		<Setter
			Property="Controls:ControlsHelper.ContentCharacterCasing"
			Value="Lower" />
		<Setter
			Property="FontFamily"
			Value="{DynamicResource DefaultFont}" />
		<Setter
			Property="FontWeight"
			Value="SemiBold" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource BlackBrush}" />
		<Setter
			Property="MinHeight"
			Value="25" />
		<Setter
			Property="Padding"
			Value="5 6" />
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ButtonBase}">
					<Grid
						Background="{TemplateBinding Background}">
						<Border
							Name="Background"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							Background="{x:Null}" />
						<Rectangle
							Name="DisabledVisualElement"
							Fill="{DynamicResource ControlsDisabledBrush}"
							IsHitTestVisible="False"
							Opacity="0" />
						<Controls:ContentControlEx
							Name="PART_ContentPresenter"
							Padding="{TemplateBinding Padding}"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							Content="{TemplateBinding Content}"
							ContentStringFormat="{TemplateBinding ContentStringFormat}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" />
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup
								x:Name="CommonStates">
								<VisualState
									x:Name="Normal" />
								<VisualState
									x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames
											Storyboard.TargetName="DisabledVisualElement"
											Storyboard.TargetProperty="Opacity">
											<SplineDoubleKeyFrame
												KeyTime="0"
												Value="0.7" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames
											Storyboard.TargetName="PART_ContentPresenter"
											Storyboard.TargetProperty="(UIElement.Opacity)">
											<EasingDoubleKeyFrame
												KeyTime="0"
												Value="0.3" />
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup
								x:Name="FocusStates">
								<VisualState
									x:Name="Focused" />
								<VisualState
									x:Name="Unfocused" />
							</VisualStateGroup>
							<VisualStateGroup
								x:Name="ValidationStates">
								<VisualState
									x:Name="Valid" />
								<VisualState
									x:Name="InvalidFocused" />
								<VisualState
									x:Name="InvalidUnfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								Value="{DynamicResource GrayBrush8}"
								Property="Background" />
							<Setter
								Value="{DynamicResource BlackBrush}"
								Property="Foreground" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								Value="{DynamicResource BlackBrush}"
								Property="Background" />
							<Setter
								Value="{DynamicResource WhiteBrush}"
								Property="Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		BasedOn="{StaticResource SquareButtonStyle}"
		TargetType="{x:Type ButtonBase}"
		x:Key="AccentedSquareButtonStyle">
		<Setter
			Property="Background"
			Value="{DynamicResource AccentColorBrush}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource IdealForegroundColorBrush}" />
	</Style>
	<Style
		BasedOn="{StaticResource SquareButtonStyle}"
		TargetType="{x:Type ButtonBase}"
		x:Key="HighlightedSquareButtonStyle">
		<Setter
			Property="Background"
			Value="{DynamicResource HighlightBrush}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource IdealForegroundColorBrush}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ButtonBase}">
					<Grid
						Background="{TemplateBinding Background}">
						<Border
							Name="Background"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							Background="{x:Null}" />
						<Rectangle
							Name="DisabledVisualElement"
							Fill="{DynamicResource ControlsDisabledBrush}"
							IsHitTestVisible="False"
							Opacity="0" />
						<Controls:ContentControlEx
							Name="PART_ContentPresenter"
							Padding="{TemplateBinding Padding}"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							Content="{TemplateBinding Content}"
							ContentStringFormat="{TemplateBinding ContentStringFormat}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" />
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup
								x:Name="CommonStates">
								<VisualState
									x:Name="Normal" />
								<VisualState
									x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames
											Storyboard.TargetName="DisabledVisualElement"
											Storyboard.TargetProperty="Opacity">
											<SplineDoubleKeyFrame
												KeyTime="0"
												Value="0.7" />
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames
											Storyboard.TargetName="PART_ContentPresenter"
											Storyboard.TargetProperty="(UIElement.Opacity)">
											<EasingDoubleKeyFrame
												KeyTime="0"
												Value="0.3" />
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup
								x:Name="FocusStates">
								<VisualState
									x:Name="Focused" />
								<VisualState
									x:Name="Unfocused" />
							</VisualStateGroup>
							<VisualStateGroup
								x:Name="ValidationStates">
								<VisualState
									x:Name="Valid" />
								<VisualState
									x:Name="InvalidFocused" />
								<VisualState
									x:Name="InvalidUnfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								Value="{DynamicResource AccentColorBrush}"
								Property="Background" />
							<Setter
								Value="{DynamicResource IdealForegroundColorBrush}"
								Property="Foreground" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								Value="{DynamicResource BlackBrush}"
								Property="Background" />
							<Setter
								Value="{DynamicResource WhiteBrush}"
								Property="Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ToggleButton}"
		x:Key="MahApps.Metro.Styles.MetroCircleToggleButtonStyle">
		<Setter
			Property="Background"
			Value="#00FFFFFF" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource GrayBrush3}" />
		<Setter
			Property="BorderThickness"
			Value="2" />
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{StaticResource MahApps.Metro.Styles.CircleButtonFocusVisualStyle}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource BlackBrush}" />
		<Setter
			Property="HorizontalContentAlignment"
			Value="Center" />
		<Setter
			Property="Padding"
			Value="1" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Grid>
						<Ellipse
							Fill="{TemplateBinding Background}"
							StrokeThickness="0" />
						<Ellipse
							Name="ellipsebg"
							Fill="{DynamicResource AccentColorBrush}"
							Opacity="0"
							StrokeThickness="0" />
						<Ellipse
							Name="ellipse"
							Stroke="{TemplateBinding BorderBrush}"
							StrokeThickness="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=BorderThickness, Converter={StaticResource BorderThicknessToStrokeThicknessConverter}}" />
						<ContentPresenter
							Name="PART_ContentPresenter"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="True">
							<TriggerBase.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="ellipsebg"
											Storyboard.TargetProperty="Opacity"
											From="0"
											To="1"
											Duration="0:0:0.3" />
									</Storyboard>
								</BeginStoryboard>
							</TriggerBase.EnterActions>
							<TriggerBase.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="ellipsebg"
											Storyboard.TargetProperty="Opacity"
											To="0"
											Duration="0:0:0.3" />
									</Storyboard>
								</BeginStoryboard>
							</TriggerBase.ExitActions>
							<Setter
								Value="{DynamicResource IdealForegroundColorBrush}"
								Property="Foreground" />
							<Setter
								TargetName="ellipse"
								Value="{DynamicResource AccentColorBrush}"
								Property="Stroke" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="ellipse"
								Property="UIElement.Opacity"
								Value="1" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="False">
							<Setter
								TargetName="ellipse"
								Property="UIElement.Opacity"
								Value="0.7" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="PART_ContentPresenter"
								Value="{DynamicResource GrayBrush7}"
								Property="Foreground" />
							<Setter
								TargetName="ellipse"
								Property="UIElement.Opacity"
								Value="0.3" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="VerticalContentAlignment"
			Value="Center" />
	</Style>
	<Style
		BasedOn="{StaticResource MahApps.Metro.Styles.MetroCircleToggleButtonStyle}"
		TargetType="{x:Type ToggleButton}"
		x:Key="MetroCircleToggleButtonStyle">
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{StaticResource MetroCircleButtonFocusVisual}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Grid>
						<Ellipse
							Margin="4"
							Fill="{TemplateBinding Background}"
							StrokeThickness="0" />
						<Ellipse
							Name="ellipsebg"
							Margin="4"
							Fill="{DynamicResource AccentColorBrush}"
							Opacity="0"
							StrokeThickness="0" />
						<Ellipse
							Name="ellipse"
							Margin="4"
							Stroke="{TemplateBinding BorderBrush}"
							StrokeThickness="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=BorderThickness, Converter={StaticResource BorderThicknessToStrokeThicknessConverter}}" />
						<ContentPresenter
							Name="PART_ContentPresenter"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="True">
							<TriggerBase.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="ellipsebg"
											Storyboard.TargetProperty="Opacity"
											From="0"
											To="1"
											Duration="0:0:0.3" />
									</Storyboard>
								</BeginStoryboard>
							</TriggerBase.EnterActions>
							<TriggerBase.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="ellipsebg"
											Storyboard.TargetProperty="Opacity"
											To="0"
											Duration="0:0:0.3" />
									</Storyboard>
								</BeginStoryboard>
							</TriggerBase.ExitActions>
							<Setter
								Value="{DynamicResource IdealForegroundColorBrush}"
								Property="Foreground" />
							<Setter
								TargetName="ellipse"
								Value="{DynamicResource AccentColorBrush}"
								Property="Stroke" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="ellipse"
								Property="UIElement.Opacity"
								Value="1" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="False">
							<Setter
								TargetName="ellipse"
								Property="UIElement.Opacity"
								Value="0.7" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="PART_ContentPresenter"
								Value="{DynamicResource GrayBrush7}"
								Property="Foreground" />
							<Setter
								TargetName="ellipse"
								Property="UIElement.Opacity"
								Value="0.3" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		TargetType="{x:Type ToggleButton}"
		x:Key="MahApps.Metro.Styles.MetroToggleButton">
		<Setter
			Property="Background"
			Value="{DynamicResource GrayBrush10}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource TextBoxBorderBrush}" />
		<Setter
			Property="BorderThickness"
			Value="1" />
		<Setter
			Property="Controls:ControlsHelper.CornerRadius"
			Value="3" />
		<Setter
			Property="FontFamily"
			Value="{DynamicResource DefaultFont}" />
		<Setter
			Property="FontSize"
			Value="{DynamicResource UpperCaseContentFontSize}" />
		<Setter
			Property="FontWeight"
			Value="Bold" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource BlackBrush}" />
		<Setter
			Property="MinHeight"
			Value="25" />
		<Setter
			Property="Padding"
			Value="5 6" />
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Grid>
						<Border
							Name="Border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							CornerRadius="{Binding Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<Border
							Name="DisabledVisualElement"
							Background="{DynamicResource ControlsDisabledBrush}"
							IsHitTestVisible="False"
							Opacity="0"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							CornerRadius="{Binding Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<Controls:ContentControlEx
							Name="PART_ContentPresenter"
							Margin="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							Content="{TemplateBinding Content}"
							ContentStringFormat="{TemplateBinding ContentStringFormat}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ToggleButton.IsChecked"
							Value="True">
							<Setter
								TargetName="Border"
								Property="BorderThickness"
								Value="2" />
						</Trigger>
						<Trigger
							Property="UIElement.IsKeyboardFocusWithin"
							Value="True">
							<Setter
								TargetName="Border"
								Property="BorderThickness"
								Value="2" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="DisabledVisualElement"
								Property="UIElement.Opacity"
								Value="0.7" />
							<Setter
								TargetName="PART_ContentPresenter"
								Property="UIElement.Opacity"
								Value="0.3" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger
				Property="ToggleButton.IsChecked"
				Value="True">
				<Setter
					Property="Background"
					Value="{DynamicResource GrayBrush2}" />
				<Setter
					Property="BorderBrush"
					Value="{DynamicResource GrayBrush5}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition
						Property="UIElement.IsMouseOver"
						Value="True" />
					<Condition
						Property="ToggleButton.IsChecked"
						Value="False" />
				</MultiTrigger.Conditions>
				<Setter
					Property="Background"
					Value="{DynamicResource GrayBrush8}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition
						Property="UIElement.IsMouseOver"
						Value="True" />
					<Condition
						Property="ToggleButton.IsChecked"
						Value="True" />
				</MultiTrigger.Conditions>
				<Setter
					Property="Background"
					Value="{DynamicResource GrayBrush3}" />
			</MultiTrigger>
			<Trigger
				Property="IsPressed"
				Value="True">
				<Setter
					Property="Background"
					Value="{DynamicResource GrayBrush7}" />
			</Trigger>
			<Trigger
				Property="UIElement.IsKeyboardFocusWithin"
				Value="True">
				<Setter
					Property="BorderBrush"
					Value="{DynamicResource ButtonMouseOverBorderBrush}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		BasedOn="{StaticResource MahApps.Metro.Styles.MetroToggleButton}"
		TargetType="{x:Type ToggleButton}"
		x:Key="MetroToggleButton">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ToggleButton}">
					<Grid>
						<Border
							Name="Background"
							Background="{TemplateBinding Background}"
							CornerRadius="{Binding Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<Border
							Name="Border"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							Background="{x:Null}"
							CornerRadius="{Binding Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<Border
							Name="DisabledVisualElement"
							Background="{DynamicResource ControlsDisabledBrush}"
							IsHitTestVisible="False"
							Opacity="0"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							CornerRadius="{Binding Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<Controls:ContentControlEx
							Name="PART_ContentPresenter"
							Padding="{TemplateBinding Padding}"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							Content="{TemplateBinding Content}"
							ContentStringFormat="{TemplateBinding ContentStringFormat}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="DisabledVisualElement"
								Property="UIElement.Opacity"
								Value="0.7" />
							<Setter
								TargetName="PART_ContentPresenter"
								Property="UIElement.Opacity"
								Value="0.3" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger
				Property="ToggleButton.IsChecked"
				Value="True">
				<Setter
					Property="Background"
					Value="{DynamicResource GrayBrush2}" />
				<Setter
					Property="BorderBrush"
					Value="{DynamicResource GrayBrush5}" />
				<Setter
					Property="BorderThickness"
					Value="2" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition
						Property="UIElement.IsMouseOver"
						Value="True" />
					<Condition
						Property="ToggleButton.IsChecked"
						Value="False" />
				</MultiTrigger.Conditions>
				<Setter
					Property="Background"
					Value="{DynamicResource GrayBrush8}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition
						Property="UIElement.IsMouseOver"
						Value="True" />
					<Condition
						Property="ToggleButton.IsChecked"
						Value="True" />
				</MultiTrigger.Conditions>
				<Setter
					Property="Background"
					Value="{DynamicResource GrayBrush3}" />
			</MultiTrigger>
			<Trigger
				Property="IsPressed"
				Value="True">
				<Setter
					Property="Background"
					Value="{DynamicResource GrayBrush7}" />
			</Trigger>
			<Trigger
				Property="UIElement.IsKeyboardFocusWithin"
				Value="True">
				<Setter
					Property="BorderBrush"
					Value="{DynamicResource ButtonMouseOverBorderBrush}" />
				<Setter
					Property="BorderThickness"
					Value="2" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style
		TargetType="{x:Type ButtonBase}"
		x:Key="SquareMetroButton">
		<Setter
			Property="Background"
			Value="#00FFFFFF" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource BlackBrush}" />
		<Setter
			Property="BorderThickness"
			Value="2" />
		<Setter
			Property="FontFamily"
			Value="{DynamicResource DefaultFont}" />
		<Setter
			Property="FontWeight"
			Value="SemiBold" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource BlackBrush}" />
		<Setter
			Property="HorizontalAlignment"
			Value="Left" />
		<Setter
			Property="Padding"
			Value="12 4 12 4" />
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ButtonBase}">
					<Grid>
						<Border
							Name="Border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
							<Grid>
								<Rectangle
									Name="MouseOverRectangle"
									Fill="{DynamicResource WhiteBrush}"
									Opacity="0" />
								<Rectangle
									Name="PressedRectangle"
									Fill="{DynamicResource BlackBrush}"
									Opacity="0" />
								<Controls:ContentControlEx
									Name="PART_ContentPresenter"
									Padding="{TemplateBinding Padding}"
									HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
									Content="{TemplateBinding Content}"
									ContentStringFormat="{TemplateBinding ContentStringFormat}"
									ContentTemplate="{TemplateBinding ContentTemplate}"
									ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
									RecognizesAccessKey="True"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" />
							</Grid>
						</Border>
						<Rectangle
							Name="FocusVisualWhite"
							IsHitTestVisible="False"
							Opacity="0"
							Stroke="#FFFFFFFF"
							StrokeDashArray="1,1"
							StrokeDashOffset="1.5"
							StrokeEndLineCap="Square" />
						<Rectangle
							Name="FocusVisualBlack"
							IsHitTestVisible="False"
							Opacity="0"
							Stroke="#FF000000"
							StrokeDashArray="1,1"
							StrokeDashOffset="0.5"
							StrokeEndLineCap="Square" />
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup
								x:Name="CommonStates">
								<VisualState
									x:Name="Normal" />
								<VisualState
									x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="MouseOverRectangle"
											Storyboard.TargetProperty="(UIElement.Opacity)"
											To="0.4"
											Duration="0" />
									</Storyboard>
								</VisualState>
								<VisualState
									x:Name="Pressed">
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="PressedRectangle"
											Storyboard.TargetProperty="(UIElement.Opacity)"
											To="1"
											Duration="0" />
									</Storyboard>
								</VisualState>
								<VisualState
									x:Name="Disabled">
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="Border"
											Storyboard.TargetProperty="(UIElement.Opacity)"
											To="0.5"
											Duration="0" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup
								x:Name="FocusStates">
								<VisualState
									x:Name="Focused">
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="FocusVisualWhite"
											Storyboard.TargetProperty="Opacity"
											To="1"
											Duration="0" />
										<DoubleAnimation
											Storyboard.TargetName="FocusVisualBlack"
											Storyboard.TargetProperty="Opacity"
											To="1"
											Duration="0" />
									</Storyboard>
								</VisualState>
								<VisualState
									x:Name="Unfocused" />
								<VisualState
									x:Name="PointerFocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								Value="{DynamicResource WhiteBrush}"
								Property="Foreground" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="VerticalAlignment"
			Value="Center" />
	</Style>
	<Style
		BasedOn="{StaticResource SquareMetroButton}"
		TargetType="{x:Type ButtonBase}"
		x:Key="MetroAccentButton">
		<Setter
			Property="Background"
			Value="{DynamicResource AccentColorBrush}" />
		<Setter
			Property="BorderBrush"
			Value="{DynamicResource AccentSelectedColorBrush}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource AccentSelectedColorBrush}" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ButtonBase}">
					<Grid>
						<Border
							Name="Border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
							<Grid>
								<Rectangle
									Name="MouseOverRectangle"
									Fill="{DynamicResource BlackBrush}"
									Opacity="0" />
								<Rectangle
									Name="PressedRectangle"
									Fill="#FFFFFFFF"
									Opacity="0" />
								<Controls:ContentControlEx
									Name="PART_ContentPresenter"
									Padding="{TemplateBinding Padding}"
									HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
									Content="{TemplateBinding Content}"
									ContentStringFormat="{TemplateBinding ContentStringFormat}"
									ContentTemplate="{TemplateBinding ContentTemplate}"
									ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
									RecognizesAccessKey="True"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" />
							</Grid>
						</Border>
						<Rectangle
							Name="FocusVisualWhite"
							IsHitTestVisible="False"
							Opacity="0"
							Stroke="#FFFFFFFF"
							StrokeDashArray="1,1"
							StrokeDashOffset="1.5"
							StrokeEndLineCap="Square" />
						<Rectangle
							Name="FocusVisualBlack"
							IsHitTestVisible="False"
							Opacity="0"
							Stroke="#FF000000"
							StrokeDashArray="1,1"
							StrokeDashOffset="0.5"
							StrokeEndLineCap="Square" />
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup
								x:Name="CommonStates">
								<VisualState
									x:Name="Normal" />
								<VisualState
									x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="MouseOverRectangle"
											Storyboard.TargetProperty="(UIElement.Opacity)"
											To="0.4"
											Duration="0" />
									</Storyboard>
								</VisualState>
								<VisualState
									x:Name="Pressed">
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="PressedRectangle"
											Storyboard.TargetProperty="(UIElement.Opacity)"
											To="1"
											Duration="0" />
									</Storyboard>
								</VisualState>
								<VisualState
									x:Name="Disabled">
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="Border"
											Storyboard.TargetProperty="(UIElement.Opacity)"
											To="0.5"
											Duration="0" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup
								x:Name="FocusStates">
								<VisualState
									x:Name="Focused">
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="FocusVisualWhite"
											Storyboard.TargetProperty="Opacity"
											To="1"
											Duration="0" />
										<DoubleAnimation
											Storyboard.TargetName="FocusVisualBlack"
											Storyboard.TargetProperty="Opacity"
											To="1"
											Duration="0" />
									</Storyboard>
								</VisualState>
								<VisualState
									x:Name="Unfocused" />
								<VisualState
									x:Name="PointerFocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								Property="Foreground"
								Value="#FF000000" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
		TargetType="{x:Type Button}"
		x:Key="ButtonDropDownStyle">
		<Setter
			Property="Background"
			Value="{DynamicResource WhiteBrush}" />
		<Setter
			Property="BorderThickness"
			Value="0" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource BlackBrush}" />
		<Setter
			Property="Padding"
			Value="2" />
		<Setter
			Property="UIElement.SnapsToDevicePixels"
			Value="True" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type Button}">
					<Border
						Name="Border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="0"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<ContentPresenter
							Name="PART_ContentPresenter"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							RecognizesAccessKey="True" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsKeyboardFocused"
							Value="True">
							<Setter
								TargetName="Border"
								Property="BorderBrush"
								Value="#00FFFFFF" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="Border"
								Value="{DynamicResource GrayBrush8}"
								Property="Background" />
						</Trigger>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								TargetName="Border"
								Value="{DynamicResource GrayBrush5}"
								Property="Background" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								TargetName="Border"
								Value="{DynamicResource GrayBrush10}"
								Property="Background" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		BasedOn="{StaticResource ButtonDropDownStyle}"
		TargetType="{x:Type Button}"
		x:Key="ButtonSplitStyle">
		<Setter
			Property="HorizontalAlignment"
			Value="Stretch" />
		<Setter
			Property="VerticalAlignment"
			Value="Stretch" />
	</Style>
	<Style
		BasedOn="{StaticResource ButtonSplitStyle}"
		TargetType="{x:Type Button}"
		x:Key="ButtonSplitArrowStyle">
		<Setter
			Property="HorizontalContentAlignment"
			Value="Center" />
		<Setter
			Property="VerticalContentAlignment"
			Value="Center" />
	</Style>
</ResourceDictionary>
