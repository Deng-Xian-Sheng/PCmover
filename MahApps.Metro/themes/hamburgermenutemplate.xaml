<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Controls="clr-namespace:MahApps.Metro.Controls" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:options="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:system="clr-namespace:System;assembly=mscorlib">
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary
			Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.Buttons.xaml" />
		<ResourceDictionary
			Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.ListBox.xaml" />
		<ResourceDictionary
			Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.Scrollbars.xaml" />
	</ResourceDictionary.MergedDictionaries>
	<system:Double
		x:Key="HamburgerMenuSelectionIndicatorThemeWidth">6</system:Double>
	<system:Double
		x:Key="HamburgerMenuSelectionIndicatorThemeHeight">24</system:Double>
	<BooleanToVisibilityConverter
		x:Key="BooleanToVisibilityConverter" />
	<Style
		BasedOn="{StaticResource ChromelessButtonStyle}"
		TargetType="{x:Type Button}"
		x:Key="HamburgerButtonStyle">
		<Setter
			Property="Background"
			Value="{DynamicResource BlackBrush}" />
		<Setter
			Property="BorderThickness"
			Value="0" />
		<Setter
			Property="Margin"
			Value="0" />
		<Setter
			Property="Padding"
			Value="0" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ButtonBase}">
					<Grid
						Background="#00FFFFFF">
						<Grid
							Name="PART_Background"
							Background="{TemplateBinding Background}"
							Opacity="0" />
						<ContentPresenter
							Name="PART_ContentPresenter"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Opacity="0.75"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="True">
							<Setter
								TargetName="PART_Background"
								Property="UIElement.Opacity"
								Value="0.3" />
							<Setter
								TargetName="PART_ContentPresenter"
								Property="UIElement.Opacity"
								Value="1" />
						</Trigger>
						<Trigger
							Property="UIElement.IsMouseOver"
							Value="False">
							<Setter
								TargetName="PART_Background"
								Property="UIElement.Opacity"
								Value="0" />
							<Setter
								TargetName="PART_ContentPresenter"
								Property="UIElement.Opacity"
								Value="0.75" />
						</Trigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Property="Foreground"
								Value="#ADADAD" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="VerticalContentAlignment"
			Value="Center" />
	</Style>
	<QuinticEase
		x:Freeze="true"
		EasingMode="EaseInOut"
		x:Key="ScrollBarEaseInOut" />
	<Style
		BasedOn="{StaticResource MetroScrollViewer}"
		TargetType="{x:Type ScrollViewer}"
		x:Key="HamburgerScrollViewerStyle">
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ScrollViewer}">
					<Grid
						Name="Grid"
						Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition
								Name="leftColumn"
								Width="*" />
							<ColumnDefinition
								Name="rightColumn"
								Width="Auto" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition
								Height="*" />
							<RowDefinition
								Height="Auto" />
						</Grid.RowDefinitions>
						<ScrollContentPresenter
							Name="PART_ScrollContentPresenter"
							Grid.Row="0"
							Grid.Column="0"
							Margin="{TemplateBinding Padding}"
							CanContentScroll="{TemplateBinding CanContentScroll}"
							CanHorizontallyScroll="False"
							CanVerticallyScroll="False"
							Content="{TemplateBinding Content}"
							ContentTemplate="{TemplateBinding ContentTemplate}" />
						<ScrollBar
							Name="PART_VerticalScrollBar"
							Grid.Row="0"
							Grid.Column="0"
							Grid.ColumnSpan="2"
							HorizontalAlignment="Right"
							AutomationProperties.AutomationId="VerticalScrollBar"
							Cursor="Arrow"
							Maximum="{TemplateBinding ScrollableHeight}"
							Minimum="0"
							Opacity="0"
							ViewportSize="{TemplateBinding ViewportHeight}"
							Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
							Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<ScrollBar
							Name="PART_HorizontalScrollBar"
							Grid.Row="0"
							Grid.RowSpan="2"
							Grid.Column="0"
							VerticalAlignment="Bottom"
							AutomationProperties.AutomationId="HorizontalScrollBar"
							Cursor="Arrow"
							Maximum="{TemplateBinding ScrollableWidth}"
							Minimum="0"
							Opacity="0"
							Orientation="Horizontal"
							ViewportSize="{TemplateBinding ViewportWidth}"
							Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
							Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="Controls:ScrollViewerHelper.VerticalScrollBarOnLeftSide"
							Value="True">
							<Setter
								TargetName="PART_HorizontalScrollBar"
								Property="Column"
								Value="1" />
							<Setter
								TargetName="PART_ScrollContentPresenter"
								Property="Column"
								Value="1" />
							<Setter
								TargetName="PART_VerticalScrollBar"
								Property="HorizontalAlignment"
								Value="Left" />
							<Setter
								TargetName="leftColumn"
								Property="Width"
								Value="Auto" />
							<Setter
								TargetName="rightColumn"
								Property="Width"
								Value="*" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Value="True"
									Binding="{Binding Path=IsVisible, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="True"
									Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="Visible"
									Binding="{Binding Path=ComputedVerticalScrollBarVisibility, RelativeSource={RelativeSource Self}}" />
								<Condition
									Value="True"
									Binding="{Binding Path=IsPaneOpen, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:SplitView}}}" />
							</MultiDataTrigger.Conditions>
							<TriggerBase.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="PART_VerticalScrollBar"
											Storyboard.TargetProperty="Opacity"
											To="1"
											Duration="0:0:0.2"
											EasingFunction="{StaticResource ScrollBarEaseInOut}" />
										<DoubleAnimation
											Storyboard.TargetName="PART_HorizontalScrollBar"
											Storyboard.TargetProperty="Opacity"
											To="1"
											Duration="0:0:0.2"
											EasingFunction="{StaticResource ScrollBarEaseInOut}" />
									</Storyboard>
								</BeginStoryboard>
							</TriggerBase.EnterActions>
							<TriggerBase.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation
											BeginTime="0:0:1"
											Storyboard.TargetName="PART_VerticalScrollBar"
											Storyboard.TargetProperty="Opacity"
											To="0"
											Duration="0:0:0.5"
											EasingFunction="{StaticResource ScrollBarEaseInOut}" />
										<DoubleAnimation
											BeginTime="0:0:1"
											Storyboard.TargetName="PART_HorizontalScrollBar"
											Storyboard.TargetProperty="Opacity"
											To="0"
											Duration="0:0:0.5"
											EasingFunction="{StaticResource ScrollBarEaseInOut}" />
									</Storyboard>
								</BeginStoryboard>
							</TriggerBase.ExitActions>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate
		x:Key="HamburgerMenuItemFocusVisualTemplate">
		<Rectangle
			SnapsToDevicePixels="True"
			Stroke="#FF000000"
			StrokeThickness="2"
			UseLayoutRounding="True" />
	</ControlTemplate>
	<Style
		BasedOn="{StaticResource MetroListBoxItem}"
		TargetType="{x:Type ListBoxItem}"
		x:Key="HamburgerMenuItemStyle">
		<Setter
			Property="Background"
			Value="#00FFFFFF" />
		<Setter
			Property="BorderThickness"
			Value="0" />
		<Setter
			Property="Controls:ItemHelper.SelectedBackgroundBrush"
			Value="{DynamicResource AccentColorBrush}" />
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{Binding Path=ItemFocusVisualStyle, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:HamburgerMenu}}, FallbackValue={x:Null}}" />
		<Setter
			Property="Foreground"
			Value="{Binding Path=Foreground, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}" />
		<Setter
			Property="HorizontalContentAlignment"
			Value="Stretch" />
		<Setter
			Property="IsEnabled"
			Value="{Binding IsEnabled, Mode=OneWay, FallbackValue=true}" />
		<Setter
			Property="IsTabStop"
			Value="{Binding Path=IsTabStop, Mode=OneWay, FallbackValue=True, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:HamburgerMenu}}}" />
		<Setter
			Property="Margin"
			Value="0" />
		<Setter
			Property="MinHeight"
			Value="0" />
		<Setter
			Property="Padding"
			Value="0" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ListBoxItem}">
					<Grid
						Background="{TemplateBinding Background}"
						RenderOptions.ClearTypeHint="{TemplateBinding ClearTypeHint}">
						<Border
							Name="Border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						<Grid
							Margin="{TemplateBinding BorderThickness}">
							<Grid
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								Visibility="{Binding Path=ShowSelectionIndicator, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:HamburgerMenu}}, Converter={StaticResource BooleanToVisibilityConverter}}">
								<Rectangle
									Name="SelectionIndicator"
									Width="{DynamicResource HamburgerMenuSelectionIndicatorThemeWidth}"
									Height="{DynamicResource HamburgerMenuSelectionIndicatorThemeHeight}"
									Fill="{TemplateBinding Foreground}"
									Focusable="False"
									Opacity="0.0" />
							</Grid>
							<ContentPresenter
								Margin="{TemplateBinding Padding}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ListBoxItem.IsSelected"
							Value="True">
							<Setter
								Property="Foreground"
								Value="{Binding Path=(Controls:ItemHelper.SelectedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
							<Setter
								TargetName="Border"
								Property="Background"
								Value="{Binding Path=(Controls:ItemHelper.SelectedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter
								TargetName="SelectionIndicator"
								Property="UIElement.Opacity"
								Value="1.0" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="ListBoxItem.IsSelected"
									Value="True" />
								<Condition
									Property="Selector.IsSelectionActive"
									Value="True" />
							</MultiTrigger.Conditions>
							<Setter
								Property="Foreground"
								Value="{Binding Path=(Controls:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
							<Setter
								TargetName="Border"
								Property="Background"
								Value="{Binding Path=(Controls:ItemHelper.ActiveSelectionBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="UIElement.IsMouseOver"
									Value="True" />
								<Condition
									Property="ListBoxItem.IsSelected"
									Value="True" />
							</MultiTrigger.Conditions>
							<Setter
								TargetName="Border"
								Property="Background"
								Value="{Binding Path=(Controls:ItemHelper.HoverSelectedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="UIElement.IsMouseOver"
									Value="True" />
								<Condition
									Property="ListBoxItem.IsSelected"
									Value="False" />
							</MultiTrigger.Conditions>
							<Setter
								TargetName="Border"
								Property="Background"
								Value="{Binding Path=(Controls:ItemHelper.HoverBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						</MultiTrigger>
						<Trigger
							Property="IsEnabled"
							Value="False">
							<Setter
								Property="Foreground"
								Value="{Binding Path=(Controls:ItemHelper.DisabledForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
							<Setter
								TargetName="Border"
								Property="Background"
								Value="{Binding Path=(Controls:ItemHelper.DisabledBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition
									Property="IsEnabled"
									Value="False" />
								<Condition
									Property="ListBoxItem.IsSelected"
									Value="True" />
							</MultiTrigger.Conditions>
							<Setter
								Property="Foreground"
								Value="{Binding Path=(Controls:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
							<Setter
								TargetName="Border"
								Property="Background"
								Value="{Binding Path=(Controls:ItemHelper.DisabledSelectedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="VerticalContentAlignment"
			Value="Stretch" />
	</Style>
	<Style
		BasedOn="{StaticResource HamburgerMenuItemStyle}"
		TargetType="{x:Type ListBoxItem}"
		x:Key="HamburgerListBoxItemStyle" />
	<Style
		BasedOn="{StaticResource MetroListBox}"
		TargetType="{x:Type ListBox}"
		x:Key="HamburgerMenuListStyle">
		<Setter
			Property="Background"
			Value="#00FFFFFF" />
		<Setter
			Property="BorderThickness"
			Value="0" />
		<Setter
			Property="HorizontalContentAlignment"
			Value="Stretch" />
		<Setter
			Property="CanContentScroll"
			Value="False" />
		<Setter
			Property="HorizontalScrollBarVisibility"
			Value="Disabled" />
		<Setter
			Property="Template">
			<Setter.Value>
				<ControlTemplate
					TargetType="{x:Type ListBox}">
					<Border
						Name="Border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
						<ScrollViewer
							Padding="{TemplateBinding Padding}"
							Controls:ScrollViewerHelper.VerticalScrollBarOnLeftSide="{TemplateBinding Controls:VerticalScrollBarOnLeftSide}"
							CanContentScroll="{TemplateBinding CanContentScroll}"
							Focusable="False"
							HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
							Style="{StaticResource HamburgerScrollViewerStyle}">
							<ItemsPresenter
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</ScrollViewer>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger
							Property="ItemsControl.IsGrouping"
							Value="False">
							<Setter
								Property="CanContentScroll"
								Value="False" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="VirtualizingPanel.IsVirtualizing"
			Value="False" />
	</Style>
	<Style
		BasedOn="{StaticResource HamburgerMenuListStyle}"
		TargetType="{x:Type ListBox}"
		x:Key="HamburgerListBoxStyle" />
	<ControlTemplate
		TargetType="{x:Type Controls:HamburgerMenu}"
		x:Key="HamburgerMenuTemplate">
		<Grid>
			<Controls:SplitView
				Name="MainSplitView"
				CompactPaneLength="{TemplateBinding CompactPaneLength}"
				DisplayMode="{TemplateBinding DisplayMode}"
				IsTabStop="False"
				OpenPaneLength="{TemplateBinding OpenPaneLength}"
				PaneBackground="{TemplateBinding PaneBackground}"
				PaneForeground="{TemplateBinding PaneForeground}"
				PanePlacement="{TemplateBinding PanePlacement}"
				IsPaneOpen="{Binding IsPaneOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
				<Controls:SplitView.Pane>
					<Grid
						Name="PaneGrid">
						<Grid.RowDefinitions>
							<RowDefinition
								Height="Auto" />
							<RowDefinition
								Height="*" />
							<RowDefinition
								Height="Auto" />
						</Grid.RowDefinitions>
						<DockPanel
							Name="PaneHeader"
							Grid.Row="0"
							Height="{TemplateBinding Controls:HamburgerHeight}"
							Margin="0 0 0 8"
							LastChildFill="True">
							<Grid
								Name="PaneHeaderGap"
								Width="{TemplateBinding Controls:HamburgerWidth}"
								DockPanel.Dock="Left" />
							<ContentControl
								Name="PaneHeaderContent"
								ContentTemplate="{TemplateBinding Controls:HamburgerMenuHeaderTemplate}"
								IsTabStop="False" />
						</DockPanel>
						<ListBox
							Name="ButtonsListView"
							Grid.Row="1"
							Width="{TemplateBinding Controls:OpenPaneLength}"
							Controls:ScrollViewerHelper.VerticalScrollBarOnLeftSide="{TemplateBinding Controls:VerticalScrollBarOnLeftSide}"
							AutomationProperties.Name="Menu items"
							Foreground="{TemplateBinding Controls:PaneForeground}"
							ItemContainerStyle="{TemplateBinding Controls:ItemContainerStyle}"
							ItemTemplate="{TemplateBinding Controls:ItemTemplate}"
							ItemTemplateSelector="{TemplateBinding Controls:ItemTemplateSelector}"
							ItemsSource="{TemplateBinding Controls:ItemsSource}"
							ScrollViewer.VerticalScrollBarVisibility="Auto"
							SelectionMode="Single"
							TabIndex="1"
							Style="{StaticResource HamburgerMenuListStyle}"
							SelectedIndex="{Binding Path=SelectedIndex, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							SelectedItem="{Binding Path=SelectedItem, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<ListBox
							Name="OptionsListView"
							Grid.Row="2"
							Width="{TemplateBinding Controls:OpenPaneLength}"
							Margin="0 20 0 8"
							VerticalAlignment="Bottom"
							AutomationProperties.Name="Option items"
							Foreground="{TemplateBinding Controls:PaneForeground}"
							ItemContainerStyle="{TemplateBinding Controls:OptionsItemContainerStyle}"
							ItemTemplate="{TemplateBinding Controls:OptionsItemTemplate}"
							ItemTemplateSelector="{TemplateBinding Controls:OptionsItemTemplateSelector}"
							ItemsSource="{TemplateBinding Controls:OptionsItemsSource}"
							ScrollViewer.VerticalScrollBarVisibility="Disabled"
							SelectionMode="Single"
							TabIndex="2"
							Style="{StaticResource HamburgerMenuListStyle}"
							SelectedIndex="{Binding Path=SelectedOptionsIndex, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							SelectedItem="{Binding Path=SelectedOptionsItem, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
					</Grid>
				</Controls:SplitView.Pane>
				<Controls:TransitioningContentControl
					Name="ContentPart"
					Padding="{TemplateBinding Padding}"
					HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
					VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
					AutomationProperties.Name="Content"
					Content="{TemplateBinding Content}"
					ContentStringFormat="{TemplateBinding ContentStringFormat}"
					ContentTemplate="{TemplateBinding ContentTemplate}"
					ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
					RestartTransitionOnContentChange="True"
					SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
					Transition="{TemplateBinding ContentTransition}" />
			</Controls:SplitView>
			<Button
				Name="HamburgerButton"
				Width="{TemplateBinding Controls:HamburgerWidth}"
				Height="{TemplateBinding Controls:HamburgerHeight}"
				Margin="0 0 0 8"
				Padding="{TemplateBinding Controls:HamburgerMargin}"
				HorizontalAlignment="Left"
				VerticalAlignment="Top"
				AutomationProperties.Name="Main button"
				ContentTemplate="{TemplateBinding Controls:HamburgerMenuTemplate}"
				Foreground="{TemplateBinding Controls:PaneForeground}"
				IsTabStop="{TemplateBinding IsTabStop}"
				TabIndex="0"
				Visibility="{TemplateBinding Controls:HamburgerVisibility}"
				Style="{StaticResource HamburgerButtonStyle}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger
				Property="Controls:HamburgerMenu.PanePlacement"
				Value="Right">
				<Setter
					TargetName="HamburgerButton"
					Property="HorizontalAlignment"
					Value="Right" />
				<Setter
					TargetName="PaneHeaderGap"
					Property="Dock"
					Value="Right" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
</ResourceDictionary>
