<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Controls="clr-namespace:MahApps.Metro.Controls">
	<ControlTemplate
		TargetType="{x:Type Button}"
		x:Key="WindowCommandsButtonTemplate">
		<Grid
			Background="{TemplateBinding Background}">
			<Controls:ContentControlEx
				Name="PART_ContentControlEx"
				Padding="{TemplateBinding Padding}"
				HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
				VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
				Content="{TemplateBinding Content}"
				ContentStringFormat="{TemplateBinding ContentStringFormat}"
				ContentTemplate="{TemplateBinding ContentTemplate}"
				ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
				Opacity="0.5"
				RecognizesAccessKey="True"
				SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
				ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger
				Property="UIElement.IsMouseOver"
				Value="True">
				<Setter
					TargetName="PART_ContentControlEx"
					Property="UIElement.Opacity"
					Value="1" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate
		TargetType="{x:Type ToggleButton}"
		x:Key="WindowCommandsToggleButtonTemplate">
		<Grid
			Background="{TemplateBinding Background}">
			<Controls:ContentControlEx
				Name="PART_ContentControlEx"
				Padding="{TemplateBinding Padding}"
				HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
				VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
				Content="{TemplateBinding Content}"
				ContentStringFormat="{TemplateBinding ContentStringFormat}"
				ContentTemplate="{TemplateBinding ContentTemplate}"
				ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
				Opacity="0.5"
				RecognizesAccessKey="True"
				SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
				ContentCharacterCasing="{Binding Path=(Controls:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger
				Property="ToggleButton.IsChecked"
				Value="True">
				<Setter
					TargetName="PART_ContentControlEx"
					Property="UIElement.Opacity"
					Value="0.8" />
			</Trigger>
			<Trigger
				Property="UIElement.IsMouseOver"
				Value="True">
				<Setter
					TargetName="PART_ContentControlEx"
					Property="UIElement.Opacity"
					Value="1" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style
		TargetType="{x:Type Control}"
		x:Key="WindowCommandsControlStyle">
		<Setter
			Property="Background"
			Value="{DynamicResource TransparentWhiteBrush}" />
		<Setter
			Property="Foreground"
			Value="{Binding Foreground, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}" />
		<Setter
			Property="HorizontalContentAlignment"
			Value="Center" />
		<Setter
			Property="Padding"
			Value="8 0 8 0" />
		<Setter
			Property="VerticalContentAlignment"
			Value="Center" />
		<Style.Triggers>
			<Trigger
				Property="IsEnabled"
				Value="False">
				<Setter
					Property="Foreground"
					Value="{DynamicResource GrayBrush4}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<ControlTemplate
		TargetType="{x:Type Controls:WindowCommands}"
		x:Key="LightWindowCommandsTemplate">
		<ItemsPresenter />
		<FrameworkTemplate.Resources>
			<ResourceDictionary>
				<Style
					BasedOn="{StaticResource WindowCommandsControlStyle}"
					TargetType="{x:Type Button}"
					x:Key="{x:Type Button}">
					<Setter
						Property="Template"
						Value="{StaticResource WindowCommandsButtonTemplate}" />
				</Style>
				<Style
					BasedOn="{StaticResource WindowCommandsControlStyle}"
					TargetType="{x:Type ToggleButton}"
					x:Key="{x:Type ToggleButton}">
					<Setter
						Property="Template"
						Value="{StaticResource WindowCommandsToggleButtonTemplate}" />
				</Style>
			</ResourceDictionary>
		</FrameworkTemplate.Resources>
	</ControlTemplate>
	<ControlTemplate
		TargetType="{x:Type Controls:WindowCommands}"
		x:Key="DarkWindowCommandsTemplate">
		<ItemsPresenter />
		<FrameworkTemplate.Resources>
			<ResourceDictionary>
				<Style
					BasedOn="{StaticResource WindowCommandsControlStyle}"
					TargetType="{x:Type Button}"
					x:Key="{x:Type Button}">
					<Setter
						Property="Template"
						Value="{StaticResource WindowCommandsButtonTemplate}" />
					<Style.Triggers>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								Property="Foreground"
								Value="{DynamicResource AccentColorBrush}" />
						</Trigger>
					</Style.Triggers>
				</Style>
				<Style
					BasedOn="{StaticResource WindowCommandsControlStyle}"
					TargetType="{x:Type ToggleButton}"
					x:Key="{x:Type ToggleButton}">
					<Setter
						Property="Template"
						Value="{StaticResource WindowCommandsToggleButtonTemplate}" />
					<Style.Triggers>
						<Trigger
							Property="IsPressed"
							Value="True">
							<Setter
								Property="Foreground"
								Value="{DynamicResource AccentColorBrush}" />
						</Trigger>
					</Style.Triggers>
				</Style>
			</ResourceDictionary>
		</FrameworkTemplate.Resources>
	</ControlTemplate>
	<Style
		TargetType="{x:Type Controls:WindowCommands}"
		x:Key="{x:Type Controls:WindowCommands}">
		<Setter
			Property="Background"
			Value="{DynamicResource TransparentWhiteBrush}" />
		<Setter
			Property="Controls:ControlsHelper.ContentCharacterCasing"
			Value="Normal" />
		<Setter
			Property="Controls:WindowCommands.DarkTemplate"
			Value="{StaticResource DarkWindowCommandsTemplate}" />
		<Setter
			Property="FrameworkElement.FocusVisualStyle"
			Value="{x:Null}" />
		<Setter
			Property="Foreground"
			Value="{DynamicResource BlackBrush}" />
		<Setter
			Property="HorizontalContentAlignment"
			Value="Stretch" />
		<Setter
			Property="IsTabStop"
			Value="False" />
		<Setter
			Property="ItemContainerStyle">
			<Setter.Value>
				<Style
					TargetType="{x:Type Controls:WindowCommandsItem}">
					<Setter
						Property="IsTabStop"
						Value="False" />
					<Setter
						Property="Template">
						<Setter.Value>
							<ControlTemplate
								TargetType="{x:Type Controls:WindowCommandsItem}">
								<StackPanel
									Orientation="Horizontal"
									HorizontalAlignment="{Binding HorizontalContentAlignment, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}"
									VerticalAlignment="{Binding VerticalContentAlignment, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}">
									<ContentPresenter
										Name="PART_ContentPresenter"
										Margin="1 0"
										Content="{TemplateBinding Content}"
										ContentStringFormat="{TemplateBinding ContentStringFormat}"
										ContentTemplate="{TemplateBinding ContentTemplate}"
										ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
									<Rectangle
										Name="PART_Separator"
										Width="1"
										IsHitTestVisible="False"
										Opacity="0.25"
										SnapsToDevicePixels="True"
										UseLayoutRounding="True"
										Height="{Binding SeparatorHeight, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}"
										Fill="{Binding Foreground, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Controls:WindowCommands}}}" />
								</StackPanel>
								<ControlTemplate.Triggers>
									<Trigger
										Property="Controls:WindowCommandsItem.IsSeparatorVisible"
										Value="False">
										<Setter
											TargetName="PART_Separator"
											Property="Visibility"
											Value="Collapsed" />
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter
			Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<StackPanel
						Orientation="Horizontal" />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
		<Setter
			Property="Controls:WindowCommands.LightTemplate"
			Value="{StaticResource LightWindowCommandsTemplate}" />
		<Setter
			Property="Template"
			Value="{StaticResource LightWindowCommandsTemplate}" />
		<Setter
			Property="VerticalContentAlignment"
			Value="Stretch" />
		<Style.Triggers>
			<DataTrigger
				Value="True"
				Binding="{Binding ParentWindow.ShowTitleBar, RelativeSource={RelativeSource Self}}">
				<Setter
					Property="Foreground"
					Value="{DynamicResource IdealForegroundColorBrush}" />
			</DataTrigger>
		</Style.Triggers>
	</Style>
</ResourceDictionary>
